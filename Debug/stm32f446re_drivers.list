
stm32f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800220c  0800220c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800220c  0800220c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800220c  0800220c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800220c  0800220c  0001220c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000005c  08002270  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08002270  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e45  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000792  00000000  00000000  00021f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  000226a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ba  00000000  00000000  00022910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000349a  00000000  00000000  00022aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c9a  00000000  00000000  00025f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ba1f  00000000  00000000  00028bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010a4  00000000  00000000  00034620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000356c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080021a8 	.word	0x080021a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080021a8 	.word	0x080021a8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <SPI2_GPIOInits+0x58>)
 80002d8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002da:	2302      	movs	r3, #2
 80002dc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002de:	2305      	movs	r3, #5
 80002e0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002e2:	2300      	movs	r3, #0
 80002e4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ea:	2302      	movs	r3, #2
 80002ec:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ee:	230d      	movs	r3, #13
 80002f0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fac1 	bl	800087c <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002fa:	230f      	movs	r3, #15
 80002fc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fabb 	bl	800087c <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000306:	230e      	movs	r3, #14
 8000308:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fab5 	bl	800087c <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000312:	230c      	movs	r3, #12
 8000314:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 faaf 	bl	800087c <GPIO_Init>


}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020400 	.word	0x40020400

0800032c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 8000330:	4b0e      	ldr	r3, [pc, #56]	; (800036c <SPI2_Inits+0x40>)
 8000332:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <SPI2_Inits+0x44>)
 8000334:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <SPI2_Inits+0x40>)
 8000338:	2201      	movs	r2, #1
 800033a:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <SPI2_Inits+0x40>)
 800033e:	2201      	movs	r2, #1
 8000340:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <SPI2_Inits+0x40>)
 8000344:	2204      	movs	r2, #4
 8000346:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <SPI2_Inits+0x40>)
 800034a:	2200      	movs	r2, #0
 800034c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <SPI2_Inits+0x40>)
 8000350:	2200      	movs	r2, #0
 8000352:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SPI2_Inits+0x40>)
 8000356:	2200      	movs	r2, #0
 8000358:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SPI2_Inits+0x40>)
 800035c:	2200      	movs	r2, #0
 800035e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <SPI2_Inits+0x40>)
 8000362:	f000 fd55 	bl	8000e10 <SPI_Init>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000078 	.word	0x20000078
 8000370:	40003800 	.word	0x40003800

08000374 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	220c      	movs	r2, #12
 800037e:	2100      	movs	r1, #0
 8000380:	4618      	mov	r0, r3
 8000382:	f001 f8f0 	bl	8001566 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOC;
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <Slave_GPIO_InterruptPinInit+0x48>)
 8000388:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800038a:	2306      	movs	r3, #6
 800038c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800038e:	2304      	movs	r3, #4
 8000390:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000392:	2300      	movs	r3, #0
 8000394:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000396:	2301      	movs	r3, #1
 8000398:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fa6d 	bl	800087c <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 80003a2:	210f      	movs	r1, #15
 80003a4:	2017      	movs	r0, #23
 80003a6:	f000 fcb1 	bl	8000d0c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	2017      	movs	r0, #23
 80003ae:	f000 fc27 	bl	8000c00 <GPIO_IRQInterruptConfig>

}
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40020800 	.word	0x40020800

080003c0 <main>:


int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed;
		GPIOLed.pGPIOx = GPIOA;
 80003c6:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <main+0x100>)
 80003c8:	607b      	str	r3, [r7, #4]
		GPIOLed.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_5;
 80003ca:	2305      	movs	r3, #5
 80003cc:	723b      	strb	r3, [r7, #8]
		GPIOLed.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 80003ce:	2301      	movs	r3, #1
 80003d0:	727b      	strb	r3, [r7, #9]
		GPIOLed.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 80003d2:	2300      	movs	r3, #0
 80003d4:	733b      	strb	r3, [r7, #12]
		GPIOLed.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_MEDIUM;
 80003d6:	2301      	movs	r3, #1
 80003d8:	72bb      	strb	r3, [r7, #10]
		GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80003da:	2300      	movs	r3, #0
 80003dc:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(&GPIOLed);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fa4b 	bl	800087c <GPIO_Init>

	uint8_t dummy = 0xff;
 80003e6:	23ff      	movs	r3, #255	; 0xff
 80003e8:	70fb      	strb	r3, [r7, #3]

	Slave_GPIO_InterruptPinInit();
 80003ea:	f7ff ffc3 	bl	8000374 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003ee:	f7ff ff6f 	bl	80002d0 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003f2:	f7ff ff9b 	bl	800032c <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 80003f6:	2101      	movs	r1, #1
 80003f8:	4832      	ldr	r0, [pc, #200]	; (80004c4 <main+0x104>)
 80003fa:	f000 fd94 	bl	8000f26 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 80003fe:	2101      	movs	r1, #1
 8000400:	2024      	movs	r0, #36	; 0x24
 8000402:	f000 fdad 	bl	8000f60 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 8000406:	4b30      	ldr	r3, [pc, #192]	; (80004c8 <main+0x108>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 800040c:	bf00      	nop
 800040e:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <main+0x10c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0fa      	beq.n	800040e <main+0x4e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 8000418:	2100      	movs	r1, #0
 800041a:	2017      	movs	r0, #23
 800041c:	f000 fbf0 	bl	8000c00 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000420:	2101      	movs	r1, #1
 8000422:	4828      	ldr	r0, [pc, #160]	; (80004c4 <main+0x104>)
 8000424:	f000 fd63 	bl	8000eee <SPI_PeripheralControl>


		while(!rcvStop)
 8000428:	e012      	b.n	8000450 <main+0x90>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 800042a:	bf00      	nop
 800042c:	1cfb      	adds	r3, r7, #3
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	4827      	ldr	r0, [pc, #156]	; (80004d0 <main+0x110>)
 8000434:	f000 fe1a 	bl	800106c <SPI_SendDataIT>
 8000438:	4603      	mov	r3, r0
 800043a:	2b02      	cmp	r3, #2
 800043c:	d0f6      	beq.n	800042c <main+0x6c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 800043e:	bf00      	nop
 8000440:	2201      	movs	r2, #1
 8000442:	4924      	ldr	r1, [pc, #144]	; (80004d4 <main+0x114>)
 8000444:	4822      	ldr	r0, [pc, #136]	; (80004d0 <main+0x110>)
 8000446:	f000 fe35 	bl	80010b4 <SPI_ReceiveDataIT>
 800044a:	4603      	mov	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	d0f7      	beq.n	8000440 <main+0x80>
		while(!rcvStop)
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <main+0x108>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0e7      	beq.n	800042a <main+0x6a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 800045a:	bf00      	nop
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	4819      	ldr	r0, [pc, #100]	; (80004c4 <main+0x104>)
 8000460:	f000 fd31 	bl	8000ec6 <SPI_GetFlagStatus>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f8      	bne.n	800045c <main+0x9c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800046a:	2100      	movs	r1, #0
 800046c:	4815      	ldr	r0, [pc, #84]	; (80004c4 <main+0x104>)
 800046e:	f000 fd3e 	bl	8000eee <SPI_PeripheralControl>
			if(strcmp(RcvBuff, "OFF") == 0){
 8000472:	4919      	ldr	r1, [pc, #100]	; (80004d8 <main+0x118>)
 8000474:	4819      	ldr	r0, [pc, #100]	; (80004dc <main+0x11c>)
 8000476:	f7ff fecb 	bl	8000210 <strcmp>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d106      	bne.n	800048e <main+0xce>
			    	GPIO_WriteToOutputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber,RESET);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7a39      	ldrb	r1, [r7, #8]
 8000484:	2200      	movs	r2, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fb94 	bl	8000bb4 <GPIO_WriteToOutputPin>
 800048c:	e00c      	b.n	80004a8 <main+0xe8>
			    	}
			    	else if(strcmp(RcvBuff, "ON") == 0) {
 800048e:	4914      	ldr	r1, [pc, #80]	; (80004e0 <main+0x120>)
 8000490:	4812      	ldr	r0, [pc, #72]	; (80004dc <main+0x11c>)
 8000492:	f7ff febd 	bl	8000210 <strcmp>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d105      	bne.n	80004a8 <main+0xe8>
			    	GPIO_WriteToOutputPin(GPIOLed.pGPIOx,GPIOLed.GPIO_PinConfig.GPIO_PinNumber,SET);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	7a39      	ldrb	r1, [r7, #8]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fb86 	bl	8000bb4 <GPIO_WriteToOutputPin>
			    	}



		printf("Rcvd data = %s\n",RcvBuff);
 80004a8:	490c      	ldr	r1, [pc, #48]	; (80004dc <main+0x11c>)
 80004aa:	480e      	ldr	r0, [pc, #56]	; (80004e4 <main+0x124>)
 80004ac:	f001 f806 	bl	80014bc <iprintf>

		dataAvailable = 0;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <main+0x10c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 80004b6:	2101      	movs	r1, #1
 80004b8:	2017      	movs	r0, #23
 80004ba:	f000 fba1 	bl	8000c00 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 80004be:	e7a2      	b.n	8000406 <main+0x46>
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40003800 	.word	0x40003800
 80004c8:	2000028d 	.word	0x2000028d
 80004cc:	2000028e 	.word	0x2000028e
 80004d0:	20000078 	.word	0x20000078
 80004d4:	2000028c 	.word	0x2000028c
 80004d8:	080021c0 	.word	0x080021c0
 80004dc:	20000098 	.word	0x20000098
 80004e0:	080021c4 	.word	0x080021c4
 80004e4:	080021c8 	.word	0x080021c8

080004e8 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <SPI2_IRQHandler+0x10>)
 80004ee:	f000 fe05 	bl	80010fc <SPI_IRQHandling>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000078 	.word	0x20000078

080004fc <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000508:	78fb      	ldrb	r3, [r7, #3]
 800050a:	2b02      	cmp	r3, #2
 800050c:	d11f      	bne.n	800054e <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <SPI_ApplicationEventCallback+0x60>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	4911      	ldr	r1, [pc, #68]	; (800055c <SPI_ApplicationEventCallback+0x60>)
 8000516:	600a      	str	r2, [r1, #0]
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <SPI_ApplicationEventCallback+0x64>)
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	b2d1      	uxtb	r1, r2
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <SPI_ApplicationEventCallback+0x68>)
 8000520:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <SPI_ApplicationEventCallback+0x64>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	d004      	beq.n	8000536 <SPI_ApplicationEventCallback+0x3a>
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <SPI_ApplicationEventCallback+0x60>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000534:	d10b      	bne.n	800054e <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <SPI_ApplicationEventCallback+0x6c>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <SPI_ApplicationEventCallback+0x60>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3b01      	subs	r3, #1
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <SPI_ApplicationEventCallback+0x68>)
 8000544:	2100      	movs	r1, #0
 8000546:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <SPI_ApplicationEventCallback+0x60>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
				}
	}

}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000290 	.word	0x20000290
 8000560:	2000028c 	.word	0x2000028c
 8000564:	20000098 	.word	0x20000098
 8000568:	2000028d 	.word	0x2000028d

0800056c <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 8000570:	2006      	movs	r0, #6
 8000572:	f000 fbf5 	bl	8000d60 <GPIO_IRQHandling>
	dataAvailable = 1;
 8000576:	4b02      	ldr	r3, [pc, #8]	; (8000580 <EXTI9_5_IRQHandler+0x14>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000028e 	.word	0x2000028e

08000584 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <ITM_SendChar+0x48>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <ITM_SendChar+0x48>)
 8000594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000598:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <ITM_SendChar+0x4c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <ITM_SendChar+0x4c>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005a6:	bf00      	nop
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f8      	beq.n	80005a8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000edfc 	.word	0xe000edfc
 80005d0:	e0000e00 	.word	0xe0000e00

080005d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005e6:	f3af 8000 	nop.w
 80005ea:	4601      	mov	r1, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	b2ca      	uxtb	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <_read+0x12>
  }

  return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e009      	b.n	8000634 <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  	        ITM_SendChar(*ptr++);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffab 	bl	8000584 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbf1      	blt.n	8000620 <_write+0x12>
  }
  return len;
 800063c:	687b      	ldr	r3, [r7, #4]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_close>:

int _close(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	605a      	str	r2, [r3, #4]
  return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_isatty>:

int _isatty(int file)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <_sbrk+0x5c>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <_sbrk+0x60>)
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <_sbrk+0x64>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <_sbrk+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d207      	bcs.n	80006f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e0:	f000 ff90 	bl	8001604 <__errno>
 80006e4:	4603      	mov	r3, r0
 80006e6:	220c      	movs	r2, #12
 80006e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	e009      	b.n	8000704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_sbrk+0x64>)
 8000700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20020000 	.word	0x20020000
 8000710:	00000400 	.word	0x00000400
 8000714:	20000294 	.word	0x20000294
 8000718:	200003e8 	.word	0x200003e8

0800071c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000720:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <LoopForever+0x6>)
  ldr r1, =_edata
 8000726:	490d      	ldr	r1, [pc, #52]	; (800075c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <LoopForever+0xe>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800073c:	4c0a      	ldr	r4, [pc, #40]	; (8000768 <LoopForever+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074a:	f000 ff61 	bl	8001610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fe37 	bl	80003c0 <main>

08000752 <LoopForever>:

LoopForever:
  b LoopForever
 8000752:	e7fe      	b.n	8000752 <LoopForever>
  ldr   r0, =_estack
 8000754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000760:	08002214 	.word	0x08002214
  ldr r2, =_sbss
 8000764:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000768:	200003e4 	.word	0x200003e4

0800076c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC_IRQHandler>
	...

08000770 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d161      	bne.n	8000846 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a33      	ldr	r2, [pc, #204]	; (8000854 <GPIO_PeriClockControl+0xe4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a32      	ldr	r2, [pc, #200]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{
		//TODO
	}
}
 8000796:	e056      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a30      	ldr	r2, [pc, #192]	; (800085c <GPIO_PeriClockControl+0xec>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007a0:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ac:	e04b      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <GPIO_PeriClockControl+0xf0>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a27      	ldr	r2, [pc, #156]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c2:	e040      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a27      	ldr	r2, [pc, #156]	; (8000864 <GPIO_PeriClockControl+0xf4>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d106      	bne.n	80007da <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	4a21      	ldr	r2, [pc, #132]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d8:	e035      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <GPIO_PeriClockControl+0xf8>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ee:	e02a      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a1e      	ldr	r2, [pc, #120]	; (800086c <GPIO_PeriClockControl+0xfc>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d106      	bne.n	8000806 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000804:	e01f      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <GPIO_PeriClockControl+0x100>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d106      	bne.n	800081c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081a:	e014      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <GPIO_PeriClockControl+0x104>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d106      	bne.n	8000832 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 800082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000830:	e009      	b.n	8000846 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <GPIO_PeriClockControl+0x108>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d105      	bne.n	8000846 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a06      	ldr	r2, [pc, #24]	; (8000858 <GPIO_PeriClockControl+0xe8>)
 8000840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40020000 	.word	0x40020000
 8000858:	40023800 	.word	0x40023800
 800085c:	40020400 	.word	0x40020400
 8000860:	40020800 	.word	0x40020800
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021000 	.word	0x40021000
 800086c:	40021400 	.word	0x40021400
 8000870:	40021800 	.word	0x40021800
 8000874:	40021c00 	.word	0x40021c00
 8000878:	40022000 	.word	0x40022000

0800087c <GPIO_Init>:
	 *
	 * @Note              -

	 */
	void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
	{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
		 uint32_t temp=0; //temp. register
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

		 //enable the peripheral clock

		 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff6e 	bl	8000770 <GPIO_PeriClockControl>

		//1 . configure the mode of gpio pin

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	795b      	ldrb	r3, [r3, #5]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d820      	bhi.n	80008de <GPIO_Init+0x62>
		{
			//the non interrupt mode
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	617b      	str	r3, [r7, #20]
			pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2103      	movs	r1, #3
 80008bc:	fa01 f303 	lsl.w	r3, r1, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	4619      	mov	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	400a      	ands	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
			pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6819      	ldr	r1, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	e0cb      	b.n	8000a76 <GPIO_Init+0x1fa>

		}else
		{
			//this part will code later . ( interrupt mode)
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	795b      	ldrb	r3, [r3, #5]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d117      	bne.n	8000916 <GPIO_Init+0x9a>
			{
				//1. configure the FTSR
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e6:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <GPIO_Init+0x198>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	7912      	ldrb	r2, [r2, #4]
 80008ee:	4611      	mov	r1, r2
 80008f0:	2201      	movs	r2, #1
 80008f2:	408a      	lsls	r2, r1
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a47      	ldr	r2, [pc, #284]	; (8000a14 <GPIO_Init+0x198>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	60d3      	str	r3, [r2, #12]
				//Clear the corresponding RTSR bit
				EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008fc:	4b45      	ldr	r3, [pc, #276]	; (8000a14 <GPIO_Init+0x198>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	7912      	ldrb	r2, [r2, #4]
 8000904:	4611      	mov	r1, r2
 8000906:	2201      	movs	r2, #1
 8000908:	408a      	lsls	r2, r1
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a41      	ldr	r2, [pc, #260]	; (8000a14 <GPIO_Init+0x198>)
 8000910:	400b      	ands	r3, r1
 8000912:	6093      	str	r3, [r2, #8]
 8000914:	e035      	b.n	8000982 <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b05      	cmp	r3, #5
 800091c:	d117      	bne.n	800094e <GPIO_Init+0xd2>
			{
				//1 . configure the RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800091e:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <GPIO_Init+0x198>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	7912      	ldrb	r2, [r2, #4]
 8000926:	4611      	mov	r1, r2
 8000928:	2201      	movs	r2, #1
 800092a:	408a      	lsls	r2, r1
 800092c:	4611      	mov	r1, r2
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <GPIO_Init+0x198>)
 8000930:	430b      	orrs	r3, r1
 8000932:	6093      	str	r3, [r2, #8]
				//Clear the corresponding RTSR bit
				EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <GPIO_Init+0x198>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	7912      	ldrb	r2, [r2, #4]
 800093c:	4611      	mov	r1, r2
 800093e:	2201      	movs	r2, #1
 8000940:	408a      	lsls	r2, r1
 8000942:	43d2      	mvns	r2, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a33      	ldr	r2, [pc, #204]	; (8000a14 <GPIO_Init+0x198>)
 8000948:	400b      	ands	r3, r1
 800094a:	60d3      	str	r3, [r2, #12]
 800094c:	e019      	b.n	8000982 <GPIO_Init+0x106>

			}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	2b06      	cmp	r3, #6
 8000954:	d115      	bne.n	8000982 <GPIO_Init+0x106>
			{
				//1. configure both FTSR and RTSR
				EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <GPIO_Init+0x198>)
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	7912      	ldrb	r2, [r2, #4]
 800095e:	4611      	mov	r1, r2
 8000960:	2201      	movs	r2, #1
 8000962:	408a      	lsls	r2, r1
 8000964:	4611      	mov	r1, r2
 8000966:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <GPIO_Init+0x198>)
 8000968:	430b      	orrs	r3, r1
 800096a:	6093      	str	r3, [r2, #8]
				//Clear the corresponding RTSR bit
				EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <GPIO_Init+0x198>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7912      	ldrb	r2, [r2, #4]
 8000974:	4611      	mov	r1, r2
 8000976:	2201      	movs	r2, #1
 8000978:	408a      	lsls	r2, r1
 800097a:	4611      	mov	r1, r2
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <GPIO_Init+0x198>)
 800097e:	430b      	orrs	r3, r1
 8000980:	60d3      	str	r3, [r2, #12]
			}

			//2. configure the GPIO port selection in SYSCFG_EXTICR
			uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	74fb      	strb	r3, [r7, #19]
			uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	74bb      	strb	r3, [r7, #18]
			uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <GPIO_Init+0x19c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d04e      	beq.n	8000a3c <GPIO_Init+0x1c0>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <GPIO_Init+0x1a0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d032      	beq.n	8000a0e <GPIO_Init+0x192>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <GPIO_Init+0x1a4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d02b      	beq.n	8000a0a <GPIO_Init+0x18e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <GPIO_Init+0x1a8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d024      	beq.n	8000a06 <GPIO_Init+0x18a>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <GPIO_Init+0x1ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d01d      	beq.n	8000a02 <GPIO_Init+0x186>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <GPIO_Init+0x1b0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d016      	beq.n	80009fe <GPIO_Init+0x182>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <GPIO_Init+0x1b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d00f      	beq.n	80009fa <GPIO_Init+0x17e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <GPIO_Init+0x1b8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d008      	beq.n	80009f6 <GPIO_Init+0x17a>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <GPIO_Init+0x1bc>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <GPIO_Init+0x176>
 80009ee:	2308      	movs	r3, #8
 80009f0:	e025      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009f2:	2300      	movs	r3, #0
 80009f4:	e023      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009f6:	2307      	movs	r3, #7
 80009f8:	e021      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009fa:	2306      	movs	r3, #6
 80009fc:	e01f      	b.n	8000a3e <GPIO_Init+0x1c2>
 80009fe:	2305      	movs	r3, #5
 8000a00:	e01d      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a02:	2304      	movs	r3, #4
 8000a04:	e01b      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e019      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e017      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e015      	b.n	8000a3e <GPIO_Init+0x1c2>
 8000a12:	bf00      	nop
 8000a14:	40013c00 	.word	0x40013c00
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40021400 	.word	0x40021400
 8000a30:	40021800 	.word	0x40021800
 8000a34:	40021c00 	.word	0x40021c00
 8000a38:	40022000 	.word	0x40022000
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	747b      	strb	r3, [r7, #17]
			SYSCFG_PCLK_EN();
 8000a40:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <GPIO_Init+0x32c>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	4a58      	ldr	r2, [pc, #352]	; (8000ba8 <GPIO_Init+0x32c>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	6453      	str	r3, [r2, #68]	; 0x44
			SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000a4c:	7c7a      	ldrb	r2, [r7, #17]
 8000a4e:	7cbb      	ldrb	r3, [r7, #18]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f103 	lsl.w	r1, r2, r3
 8000a56:	4a55      	ldr	r2, [pc, #340]	; (8000bac <GPIO_Init+0x330>)
 8000a58:	7cfb      	ldrb	r3, [r7, #19]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			//3 . enable the exti interrupt delivery using IMR
			EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a60:	4b53      	ldr	r3, [pc, #332]	; (8000bb0 <GPIO_Init+0x334>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	7912      	ldrb	r2, [r2, #4]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	408a      	lsls	r2, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4a4f      	ldr	r2, [pc, #316]	; (8000bb0 <GPIO_Init+0x334>)
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6013      	str	r3, [r2, #0]

		}

		//2. configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );//its multiplied by 2 because this reg has two bits for each pin speed
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	799b      	ldrb	r3, [r3, #6]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2103      	movs	r1, #3
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6899      	ldr	r1, [r3, #8]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	609a      	str	r2, [r3, #8]

		//3. configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	79db      	ldrb	r3, [r3, #7]
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	68da      	ldr	r2, [r3, #12]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68d9      	ldr	r1, [r3, #12]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	60da      	str	r2, [r3, #12]


		//4. configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7a1b      	ldrb	r3, [r3, #8]
 8000afa:	461a      	mov	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	4619      	mov	r1, r3
 8000b12:	2301      	movs	r3, #1
 8000b14:	408b      	lsls	r3, r1
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	400a      	ands	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6859      	ldr	r1, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	605a      	str	r2, [r3, #4]

		//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d131      	bne.n	8000b9e <GPIO_Init+0x322>
		{
			//configure the alt function registers.
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	791b      	ldrb	r3, [r3, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	7c3a      	ldrb	r2, [r7, #16]
 8000b52:	3208      	adds	r2, #8
 8000b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	7c3a      	ldrb	r2, [r7, #16]
 8000b6c:	4001      	ands	r1, r0
 8000b6e:	3208      	adds	r2, #8
 8000b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	7c3a      	ldrb	r2, [r7, #16]
 8000b7a:	3208      	adds	r2, #8
 8000b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7a5b      	ldrb	r3, [r3, #9]
 8000b84:	461a      	mov	r2, r3
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7c3a      	ldrb	r2, [r7, #16]
 8000b96:	4301      	orrs	r1, r0
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}

	}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	40013c00 	.word	0x40013c00

08000bb4 <GPIO_WriteToOutputPin>:
	 *
	 * @Note              -

	 */
	void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
	{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	70bb      	strb	r3, [r7, #2]

		if(Value == SET)
 8000bc4:	78bb      	ldrb	r3, [r7, #2]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d109      	bne.n	8000bde <GPIO_WriteToOutputPin+0x2a>
		{
			//write 1 to the output data register at the bit field corresponding to the pin number
			pGPIOx->ODR |= ( 1 << PinNumber);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	78fa      	ldrb	r2, [r7, #3]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	615a      	str	r2, [r3, #20]
		}else
		{
			//write 0
			pGPIOx->ODR &= ~( 1 << PinNumber);
		}
	}
 8000bdc:	e009      	b.n	8000bf2 <GPIO_WriteToOutputPin+0x3e>
			pGPIOx->ODR &= ~( 1 << PinNumber);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	78fa      	ldrb	r2, [r7, #3]
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	43d2      	mvns	r2, r2
 8000bec:	401a      	ands	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	615a      	str	r2, [r3, #20]
	}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <GPIO_IRQInterruptConfig>:
	 *
	 * @Note              -

	 */
	void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
	{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	460a      	mov	r2, r1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]

		if(EnorDi == ENABLE)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d133      	bne.n	8000c7e <GPIO_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <= 31)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d80a      	bhi.n	8000c32 <GPIO_IRQInterruptConfig+0x32>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );//ISER interrupt set enable
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <GPIO_IRQInterruptConfig+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <GPIO_IRQInterruptConfig+0xf4>)
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6013      	str	r3, [r2, #0]
				//program ICER2 register
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
			}
		}

	}
 8000c30:	e059      	b.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b1f      	cmp	r3, #31
 8000c36:	d90f      	bls.n	8000c58 <GPIO_IRQInterruptConfig+0x58>
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c3c:	d80c      	bhi.n	8000c58 <GPIO_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <GPIO_IRQInterruptConfig+0xf8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	79fa      	ldrb	r2, [r7, #7]
 8000c44:	f002 021f 	and.w	r2, r2, #31
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <GPIO_IRQInterruptConfig+0xf8>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e046      	b.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c5c:	d943      	bls.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b5f      	cmp	r3, #95	; 0x5f
 8000c62:	d840      	bhi.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <GPIO_IRQInterruptConfig+0xfc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <GPIO_IRQInterruptConfig+0xfc>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6013      	str	r3, [r2, #0]
	}
 8000c7c:	e033      	b.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	d80a      	bhi.n	8000c9a <GPIO_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= ( 1 << IRQNumber );//ICER interrupt clear enable
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <GPIO_IRQInterruptConfig+0x100>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	4611      	mov	r1, r2
 8000c92:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <GPIO_IRQInterruptConfig+0x100>)
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6013      	str	r3, [r2, #0]
	}
 8000c98:	e025      	b.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	d90f      	bls.n	8000cc0 <GPIO_IRQInterruptConfig+0xc0>
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca4:	d80c      	bhi.n	8000cc0 <GPIO_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <GPIO_IRQInterruptConfig+0x104>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	f002 021f 	and.w	r2, r2, #31
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <GPIO_IRQInterruptConfig+0x104>)
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e012      	b.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc4:	d90f      	bls.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b5f      	cmp	r3, #95	; 0x5f
 8000cca:	d80c      	bhi.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <GPIO_IRQInterruptConfig+0x108>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <GPIO_IRQInterruptConfig+0x108>)
 8000ce0:	430b      	orrs	r3, r1
 8000ce2:	6013      	str	r3, [r2, #0]
	}
 8000ce4:	e7ff      	b.n	8000ce6 <GPIO_IRQInterruptConfig+0xe6>
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000e104 	.word	0xe000e104
 8000cfc:	e000e108 	.word	0xe000e108
 8000d00:	e000e180 	.word	0xe000e180
 8000d04:	e000e184 	.word	0xe000e184
 8000d08:	e000e188 	.word	0xe000e188

08000d0c <GPIO_IRQPriorityConfig>:
	 *
	 * @Note              -

	 */
	void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
	{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
		//1. first lets find out the ipr register
		uint8_t iprx = IRQNumber / 4;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	73fb      	strb	r3, [r7, #15]
		uint8_t iprx_section  = IRQNumber %4 ;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	73bb      	strb	r3, [r7, #14]

		uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8000d26:	7bbb      	ldrb	r3, [r7, #14]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	737b      	strb	r3, [r7, #13]

		*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d38:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	7b7b      	ldrb	r3, [r7, #13]
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000d4c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000d50:	430a      	orrs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]

	}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <GPIO_IRQHandling>:
	 *
	 * @Note              -

	 */
	void GPIO_IRQHandling(uint8_t PinNumber)
	{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
		//there are two pending registers EXTI AND NVIC
		//clear the exti pr register corresponding to the pin number
		if(EXTI->PR & ( 1 << PinNumber))//PR Pending register
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <GPIO_IRQHandling+0x3c>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	79fa      	ldrb	r2, [r7, #7]
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	4013      	ands	r3, r2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d009      	beq.n	8000d90 <GPIO_IRQHandling+0x30>
		{
			//clear
			EXTI->PR |= ( 1 << PinNumber);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <GPIO_IRQHandling+0x3c>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	79fa      	ldrb	r2, [r7, #7]
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <GPIO_IRQHandling+0x3c>)
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6153      	str	r3, [r2, #20]
		}

	}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40013c00 	.word	0x40013c00

08000da0 <SPI_PeriClockControl>:

/*********************************************************************
 * @fn      		  - SPI_PeriClockControl
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d11f      	bne.n	8000df2 <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <SPI_PeriClockControl+0x60>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d106      	bne.n	8000dc8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <SPI_PeriClockControl+0x64>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <SPI_PeriClockControl+0x64>)
 8000dc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8000dc6:	e014      	b.n	8000df2 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <SPI_PeriClockControl+0x68>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d106      	bne.n	8000dde <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <SPI_PeriClockControl+0x64>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <SPI_PeriClockControl+0x64>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ddc:	e009      	b.n	8000df2 <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SPI_PeriClockControl+0x6c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d105      	bne.n	8000df2 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SPI_PeriClockControl+0x64>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <SPI_PeriClockControl+0x64>)
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40013000 	.word	0x40013000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40003800 	.word	0x40003800
 8000e0c:	40003c00 	.word	0x40003c00

08000e10 <SPI_Init>:

/*********************************************************************
 * @fn      		  - SPI_Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ffbe 	bl	8000da0 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	791b      	ldrb	r3, [r3, #4]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d104      	bne.n	8000e48 <SPI_Init+0x38>
	{
		//bidi mode should be cleared-BIDI mode is to make the line half duplex
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	e014      	b.n	8000e72 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d104      	bne.n	8000e5a <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e00b      	b.n	8000e72 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	795b      	ldrb	r3, [r3, #5]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d107      	bne.n	8000e72 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e68:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set - this makes full duplex to ignore the tx line
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e70:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	79db      	ldrb	r3, [r3, #7]
 8000e84:	02db      	lsls	r3, r3, #11
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7a1b      	ldrb	r3, [r3, #8]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

	//7. configure the ssm
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7a9b      	ldrb	r3, [r3, #10]
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	601a      	str	r2, [r3, #0]

}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <SPI_GetFlagStatus>:
 //todo
}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <SPI_PeripheralControl>:

/*********************************************************************
 * @fn      		  - SPI_PeripheralControl
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d106      	bne.n	8000f0e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}
}
 8000f0c:	e005      	b.n	8000f1a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <SPI_SSOEConfig>:

/*********************************************************************
 * @fn      		  - SPI_SSOEConfig
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f043 0204 	orr.w	r2, r3, #4
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000f44:	e005      	b.n	8000f52 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f023 0204 	bic.w	r2, r3, #4
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SPI_IRQInterruptConfig>:

/*********************************************************************
 * @fn      		  - SPI_IRQInterruptConfig
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d133      	bne.n	8000fde <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b1f      	cmp	r3, #31
 8000f7a:	d80a      	bhi.n	8000f92 <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000f7c:	4b35      	ldr	r3, [pc, #212]	; (8001054 <SPI_IRQInterruptConfig+0xf4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4a32      	ldr	r2, [pc, #200]	; (8001054 <SPI_IRQInterruptConfig+0xf4>)
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000f90:	e059      	b.n	8001046 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b1f      	cmp	r3, #31
 8000f96:	d90f      	bls.n	8000fb8 <SPI_IRQInterruptConfig+0x58>
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f9c:	d80c      	bhi.n	8000fb8 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <SPI_IRQInterruptConfig+0xf8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	f002 021f 	and.w	r2, r2, #31
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a29      	ldr	r2, [pc, #164]	; (8001058 <SPI_IRQInterruptConfig+0xf8>)
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e046      	b.n	8001046 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b3f      	cmp	r3, #63	; 0x3f
 8000fbc:	d943      	bls.n	8001046 <SPI_IRQInterruptConfig+0xe6>
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b5f      	cmp	r3, #95	; 0x5f
 8000fc2:	d840      	bhi.n	8001046 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <SPI_IRQInterruptConfig+0xfc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <SPI_IRQInterruptConfig+0xfc>)
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	e033      	b.n	8001046 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b1f      	cmp	r3, #31
 8000fe2:	d80a      	bhi.n	8000ffa <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <SPI_IRQInterruptConfig+0x100>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	79fa      	ldrb	r2, [r7, #7]
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <SPI_IRQInterruptConfig+0x100>)
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	e025      	b.n	8001046 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b1f      	cmp	r3, #31
 8000ffe:	d90f      	bls.n	8001020 <SPI_IRQInterruptConfig+0xc0>
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b3f      	cmp	r3, #63	; 0x3f
 8001004:	d80c      	bhi.n	8001020 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <SPI_IRQInterruptConfig+0x104>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	f002 021f 	and.w	r2, r2, #31
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	4611      	mov	r1, r2
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <SPI_IRQInterruptConfig+0x104>)
 800101a:	430b      	orrs	r3, r1
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e012      	b.n	8001046 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b3f      	cmp	r3, #63	; 0x3f
 8001024:	d90f      	bls.n	8001046 <SPI_IRQInterruptConfig+0xe6>
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b5f      	cmp	r3, #95	; 0x5f
 800102a:	d80c      	bhi.n	8001046 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <SPI_IRQInterruptConfig+0x108>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SPI_IRQInterruptConfig+0x108>)
 8001040:	430b      	orrs	r3, r1
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	e7ff      	b.n	8001046 <SPI_IRQInterruptConfig+0xe6>
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000e104 	.word	0xe000e104
 800105c:	e000e10c 	.word	0xe000e10c
 8001060:	e000e180 	.word	0xe000e180
 8001064:	e000e184 	.word	0xe000e184
 8001068:	e000e18c 	.word	0xe000e18c

0800106c <SPI_SendDataIT>:

/*********************************************************************
 * @fn      		  - SPI_SendDataIT
 */
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	7f1b      	ldrb	r3, [r3, #28]
 800107c:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d010      	beq.n	80010a6 <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2202      	movs	r2, #2
 8001094:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a4:	605a      	str	r2, [r3, #4]

	}


	return state;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SPI_ReceiveDataIT>:

/*********************************************************************
 * @fn      		  - SPI_ReceiveDataIT
 */
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	7f5b      	ldrb	r3, [r3, #29]
 80010c4:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d010      	beq.n	80010ee <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ec:	605a      	str	r2, [r3, #4]

	}


	return state;
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SPI_IRQHandling>:

/*********************************************************************
 * @fn      		  - SPI_IRQHandling
 */
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800111e:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <SPI_IRQHandling+0x36>
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f832 	bl	8001196 <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114c:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <SPI_IRQHandling+0x64>
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f85b 	bl	8001216 <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116c:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <SPI_IRQHandling+0x92>
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f886 	bl	800129a <spi_ovr_err_interrupt_handle>
	}


}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <spi_txe_interrupt_handle>:

//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d015      	beq.n	80011d8 <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	e00f      	b.n	80011f8 <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	1e5a      	subs	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f862 	bl	80012ca <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff f977 	bl	80004fc <SPI_ApplicationEventCallback>
	}

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001228:	2b00      	cmp	r3, #0
 800122a:	d016      	beq.n	800125a <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	b292      	uxth	r2, r2
 8001238:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	1e9a      	subs	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	e010      	b.n	800127c <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d106      	bne.n	8001292 <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f83b 	bl	8001300 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 800128a:	2102      	movs	r1, #2
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff f935 	bl	80004fc <SPI_ApplicationEventCallback>
	}

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7f1b      	ldrb	r3, [r3, #28]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d007      	beq.n	80012ba <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 80012ba:	2103      	movs	r1, #3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f91d 	bl	80004fc <SPI_ApplicationEventCallback>

}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SPI_CloseTransmisson>:

void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e0:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	771a      	strb	r2, [r3, #28]

}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001316:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	775a      	strb	r2, [r3, #29]

}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <std>:
 8001338:	2300      	movs	r3, #0
 800133a:	b510      	push	{r4, lr}
 800133c:	4604      	mov	r4, r0
 800133e:	e9c0 3300 	strd	r3, r3, [r0]
 8001342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001346:	6083      	str	r3, [r0, #8]
 8001348:	8181      	strh	r1, [r0, #12]
 800134a:	6643      	str	r3, [r0, #100]	; 0x64
 800134c:	81c2      	strh	r2, [r0, #14]
 800134e:	6183      	str	r3, [r0, #24]
 8001350:	4619      	mov	r1, r3
 8001352:	2208      	movs	r2, #8
 8001354:	305c      	adds	r0, #92	; 0x5c
 8001356:	f000 f906 	bl	8001566 <memset>
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <std+0x58>)
 800135c:	6263      	str	r3, [r4, #36]	; 0x24
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <std+0x5c>)
 8001360:	62a3      	str	r3, [r4, #40]	; 0x28
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <std+0x60>)
 8001364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <std+0x64>)
 8001368:	6323      	str	r3, [r4, #48]	; 0x30
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <std+0x68>)
 800136c:	6224      	str	r4, [r4, #32]
 800136e:	429c      	cmp	r4, r3
 8001370:	d006      	beq.n	8001380 <std+0x48>
 8001372:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001376:	4294      	cmp	r4, r2
 8001378:	d002      	beq.n	8001380 <std+0x48>
 800137a:	33d0      	adds	r3, #208	; 0xd0
 800137c:	429c      	cmp	r4, r3
 800137e:	d105      	bne.n	800138c <std+0x54>
 8001380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001388:	f000 b966 	b.w	8001658 <__retarget_lock_init_recursive>
 800138c:	bd10      	pop	{r4, pc}
 800138e:	bf00      	nop
 8001390:	080014e1 	.word	0x080014e1
 8001394:	08001503 	.word	0x08001503
 8001398:	0800153b 	.word	0x0800153b
 800139c:	0800155f 	.word	0x0800155f
 80013a0:	20000298 	.word	0x20000298

080013a4 <stdio_exit_handler>:
 80013a4:	4a02      	ldr	r2, [pc, #8]	; (80013b0 <stdio_exit_handler+0xc>)
 80013a6:	4903      	ldr	r1, [pc, #12]	; (80013b4 <stdio_exit_handler+0x10>)
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <stdio_exit_handler+0x14>)
 80013aa:	f000 b869 	b.w	8001480 <_fwalk_sglue>
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000
 80013b4:	08001f05 	.word	0x08001f05
 80013b8:	2000000c 	.word	0x2000000c

080013bc <cleanup_stdio>:
 80013bc:	6841      	ldr	r1, [r0, #4]
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <cleanup_stdio+0x34>)
 80013c0:	4299      	cmp	r1, r3
 80013c2:	b510      	push	{r4, lr}
 80013c4:	4604      	mov	r4, r0
 80013c6:	d001      	beq.n	80013cc <cleanup_stdio+0x10>
 80013c8:	f000 fd9c 	bl	8001f04 <_fflush_r>
 80013cc:	68a1      	ldr	r1, [r4, #8]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <cleanup_stdio+0x38>)
 80013d0:	4299      	cmp	r1, r3
 80013d2:	d002      	beq.n	80013da <cleanup_stdio+0x1e>
 80013d4:	4620      	mov	r0, r4
 80013d6:	f000 fd95 	bl	8001f04 <_fflush_r>
 80013da:	68e1      	ldr	r1, [r4, #12]
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <cleanup_stdio+0x3c>)
 80013de:	4299      	cmp	r1, r3
 80013e0:	d004      	beq.n	80013ec <cleanup_stdio+0x30>
 80013e2:	4620      	mov	r0, r4
 80013e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013e8:	f000 bd8c 	b.w	8001f04 <_fflush_r>
 80013ec:	bd10      	pop	{r4, pc}
 80013ee:	bf00      	nop
 80013f0:	20000298 	.word	0x20000298
 80013f4:	20000300 	.word	0x20000300
 80013f8:	20000368 	.word	0x20000368

080013fc <global_stdio_init.part.0>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <global_stdio_init.part.0+0x30>)
 8001400:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <global_stdio_init.part.0+0x34>)
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <global_stdio_init.part.0+0x38>)
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	4620      	mov	r0, r4
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	f7ff ff94 	bl	8001338 <std>
 8001410:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001414:	2201      	movs	r2, #1
 8001416:	2109      	movs	r1, #9
 8001418:	f7ff ff8e 	bl	8001338 <std>
 800141c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001420:	2202      	movs	r2, #2
 8001422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001426:	2112      	movs	r1, #18
 8001428:	f7ff bf86 	b.w	8001338 <std>
 800142c:	200003d0 	.word	0x200003d0
 8001430:	20000298 	.word	0x20000298
 8001434:	080013a5 	.word	0x080013a5

08001438 <__sfp_lock_acquire>:
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <__sfp_lock_acquire+0x8>)
 800143a:	f000 b90e 	b.w	800165a <__retarget_lock_acquire_recursive>
 800143e:	bf00      	nop
 8001440:	200003d9 	.word	0x200003d9

08001444 <__sfp_lock_release>:
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <__sfp_lock_release+0x8>)
 8001446:	f000 b909 	b.w	800165c <__retarget_lock_release_recursive>
 800144a:	bf00      	nop
 800144c:	200003d9 	.word	0x200003d9

08001450 <__sinit>:
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	f7ff fff0 	bl	8001438 <__sfp_lock_acquire>
 8001458:	6a23      	ldr	r3, [r4, #32]
 800145a:	b11b      	cbz	r3, 8001464 <__sinit+0x14>
 800145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001460:	f7ff bff0 	b.w	8001444 <__sfp_lock_release>
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__sinit+0x28>)
 8001466:	6223      	str	r3, [r4, #32]
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__sinit+0x2c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f5      	bne.n	800145c <__sinit+0xc>
 8001470:	f7ff ffc4 	bl	80013fc <global_stdio_init.part.0>
 8001474:	e7f2      	b.n	800145c <__sinit+0xc>
 8001476:	bf00      	nop
 8001478:	080013bd 	.word	0x080013bd
 800147c:	200003d0 	.word	0x200003d0

08001480 <_fwalk_sglue>:
 8001480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001484:	4607      	mov	r7, r0
 8001486:	4688      	mov	r8, r1
 8001488:	4614      	mov	r4, r2
 800148a:	2600      	movs	r6, #0
 800148c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001490:	f1b9 0901 	subs.w	r9, r9, #1
 8001494:	d505      	bpl.n	80014a2 <_fwalk_sglue+0x22>
 8001496:	6824      	ldr	r4, [r4, #0]
 8001498:	2c00      	cmp	r4, #0
 800149a:	d1f7      	bne.n	800148c <_fwalk_sglue+0xc>
 800149c:	4630      	mov	r0, r6
 800149e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014a2:	89ab      	ldrh	r3, [r5, #12]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d907      	bls.n	80014b8 <_fwalk_sglue+0x38>
 80014a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014ac:	3301      	adds	r3, #1
 80014ae:	d003      	beq.n	80014b8 <_fwalk_sglue+0x38>
 80014b0:	4629      	mov	r1, r5
 80014b2:	4638      	mov	r0, r7
 80014b4:	47c0      	blx	r8
 80014b6:	4306      	orrs	r6, r0
 80014b8:	3568      	adds	r5, #104	; 0x68
 80014ba:	e7e9      	b.n	8001490 <_fwalk_sglue+0x10>

080014bc <iprintf>:
 80014bc:	b40f      	push	{r0, r1, r2, r3}
 80014be:	b507      	push	{r0, r1, r2, lr}
 80014c0:	4906      	ldr	r1, [pc, #24]	; (80014dc <iprintf+0x20>)
 80014c2:	ab04      	add	r3, sp, #16
 80014c4:	6808      	ldr	r0, [r1, #0]
 80014c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80014ca:	6881      	ldr	r1, [r0, #8]
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	f000 f9e9 	bl	80018a4 <_vfiprintf_r>
 80014d2:	b003      	add	sp, #12
 80014d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80014d8:	b004      	add	sp, #16
 80014da:	4770      	bx	lr
 80014dc:	20000058 	.word	0x20000058

080014e0 <__sread>:
 80014e0:	b510      	push	{r4, lr}
 80014e2:	460c      	mov	r4, r1
 80014e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014e8:	f000 f868 	bl	80015bc <_read_r>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	bfab      	itete	ge
 80014f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80014f2:	89a3      	ldrhlt	r3, [r4, #12]
 80014f4:	181b      	addge	r3, r3, r0
 80014f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80014fa:	bfac      	ite	ge
 80014fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80014fe:	81a3      	strhlt	r3, [r4, #12]
 8001500:	bd10      	pop	{r4, pc}

08001502 <__swrite>:
 8001502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001506:	461f      	mov	r7, r3
 8001508:	898b      	ldrh	r3, [r1, #12]
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	4605      	mov	r5, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4616      	mov	r6, r2
 8001512:	d505      	bpl.n	8001520 <__swrite+0x1e>
 8001514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001518:	2302      	movs	r3, #2
 800151a:	2200      	movs	r2, #0
 800151c:	f000 f83c 	bl	8001598 <_lseek_r>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800152a:	81a3      	strh	r3, [r4, #12]
 800152c:	4632      	mov	r2, r6
 800152e:	463b      	mov	r3, r7
 8001530:	4628      	mov	r0, r5
 8001532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001536:	f000 b853 	b.w	80015e0 <_write_r>

0800153a <__sseek>:
 800153a:	b510      	push	{r4, lr}
 800153c:	460c      	mov	r4, r1
 800153e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001542:	f000 f829 	bl	8001598 <_lseek_r>
 8001546:	1c43      	adds	r3, r0, #1
 8001548:	89a3      	ldrh	r3, [r4, #12]
 800154a:	bf15      	itete	ne
 800154c:	6560      	strne	r0, [r4, #84]	; 0x54
 800154e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001552:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001556:	81a3      	strheq	r3, [r4, #12]
 8001558:	bf18      	it	ne
 800155a:	81a3      	strhne	r3, [r4, #12]
 800155c:	bd10      	pop	{r4, pc}

0800155e <__sclose>:
 800155e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001562:	f000 b809 	b.w	8001578 <_close_r>

08001566 <memset>:
 8001566:	4402      	add	r2, r0
 8001568:	4603      	mov	r3, r0
 800156a:	4293      	cmp	r3, r2
 800156c:	d100      	bne.n	8001570 <memset+0xa>
 800156e:	4770      	bx	lr
 8001570:	f803 1b01 	strb.w	r1, [r3], #1
 8001574:	e7f9      	b.n	800156a <memset+0x4>
	...

08001578 <_close_r>:
 8001578:	b538      	push	{r3, r4, r5, lr}
 800157a:	4d06      	ldr	r5, [pc, #24]	; (8001594 <_close_r+0x1c>)
 800157c:	2300      	movs	r3, #0
 800157e:	4604      	mov	r4, r0
 8001580:	4608      	mov	r0, r1
 8001582:	602b      	str	r3, [r5, #0]
 8001584:	f7ff f85f 	bl	8000646 <_close>
 8001588:	1c43      	adds	r3, r0, #1
 800158a:	d102      	bne.n	8001592 <_close_r+0x1a>
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	b103      	cbz	r3, 8001592 <_close_r+0x1a>
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	bd38      	pop	{r3, r4, r5, pc}
 8001594:	200003d4 	.word	0x200003d4

08001598 <_lseek_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4d07      	ldr	r5, [pc, #28]	; (80015b8 <_lseek_r+0x20>)
 800159c:	4604      	mov	r4, r0
 800159e:	4608      	mov	r0, r1
 80015a0:	4611      	mov	r1, r2
 80015a2:	2200      	movs	r2, #0
 80015a4:	602a      	str	r2, [r5, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f7ff f874 	bl	8000694 <_lseek>
 80015ac:	1c43      	adds	r3, r0, #1
 80015ae:	d102      	bne.n	80015b6 <_lseek_r+0x1e>
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	b103      	cbz	r3, 80015b6 <_lseek_r+0x1e>
 80015b4:	6023      	str	r3, [r4, #0]
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
 80015b8:	200003d4 	.word	0x200003d4

080015bc <_read_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d07      	ldr	r5, [pc, #28]	; (80015dc <_read_r+0x20>)
 80015c0:	4604      	mov	r4, r0
 80015c2:	4608      	mov	r0, r1
 80015c4:	4611      	mov	r1, r2
 80015c6:	2200      	movs	r2, #0
 80015c8:	602a      	str	r2, [r5, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f7ff f802 	bl	80005d4 <_read>
 80015d0:	1c43      	adds	r3, r0, #1
 80015d2:	d102      	bne.n	80015da <_read_r+0x1e>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	b103      	cbz	r3, 80015da <_read_r+0x1e>
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	200003d4 	.word	0x200003d4

080015e0 <_write_r>:
 80015e0:	b538      	push	{r3, r4, r5, lr}
 80015e2:	4d07      	ldr	r5, [pc, #28]	; (8001600 <_write_r+0x20>)
 80015e4:	4604      	mov	r4, r0
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	602a      	str	r2, [r5, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f7ff f80d 	bl	800060e <_write>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d102      	bne.n	80015fe <_write_r+0x1e>
 80015f8:	682b      	ldr	r3, [r5, #0]
 80015fa:	b103      	cbz	r3, 80015fe <_write_r+0x1e>
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	200003d4 	.word	0x200003d4

08001604 <__errno>:
 8001604:	4b01      	ldr	r3, [pc, #4]	; (800160c <__errno+0x8>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000058 	.word	0x20000058

08001610 <__libc_init_array>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	4d0d      	ldr	r5, [pc, #52]	; (8001648 <__libc_init_array+0x38>)
 8001614:	4c0d      	ldr	r4, [pc, #52]	; (800164c <__libc_init_array+0x3c>)
 8001616:	1b64      	subs	r4, r4, r5
 8001618:	10a4      	asrs	r4, r4, #2
 800161a:	2600      	movs	r6, #0
 800161c:	42a6      	cmp	r6, r4
 800161e:	d109      	bne.n	8001634 <__libc_init_array+0x24>
 8001620:	4d0b      	ldr	r5, [pc, #44]	; (8001650 <__libc_init_array+0x40>)
 8001622:	4c0c      	ldr	r4, [pc, #48]	; (8001654 <__libc_init_array+0x44>)
 8001624:	f000 fdc0 	bl	80021a8 <_init>
 8001628:	1b64      	subs	r4, r4, r5
 800162a:	10a4      	asrs	r4, r4, #2
 800162c:	2600      	movs	r6, #0
 800162e:	42a6      	cmp	r6, r4
 8001630:	d105      	bne.n	800163e <__libc_init_array+0x2e>
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	f855 3b04 	ldr.w	r3, [r5], #4
 8001638:	4798      	blx	r3
 800163a:	3601      	adds	r6, #1
 800163c:	e7ee      	b.n	800161c <__libc_init_array+0xc>
 800163e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001642:	4798      	blx	r3
 8001644:	3601      	adds	r6, #1
 8001646:	e7f2      	b.n	800162e <__libc_init_array+0x1e>
 8001648:	0800220c 	.word	0x0800220c
 800164c:	0800220c 	.word	0x0800220c
 8001650:	0800220c 	.word	0x0800220c
 8001654:	08002210 	.word	0x08002210

08001658 <__retarget_lock_init_recursive>:
 8001658:	4770      	bx	lr

0800165a <__retarget_lock_acquire_recursive>:
 800165a:	4770      	bx	lr

0800165c <__retarget_lock_release_recursive>:
 800165c:	4770      	bx	lr
	...

08001660 <_free_r>:
 8001660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001662:	2900      	cmp	r1, #0
 8001664:	d044      	beq.n	80016f0 <_free_r+0x90>
 8001666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800166a:	9001      	str	r0, [sp, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f1a1 0404 	sub.w	r4, r1, #4
 8001672:	bfb8      	it	lt
 8001674:	18e4      	addlt	r4, r4, r3
 8001676:	f000 f8df 	bl	8001838 <__malloc_lock>
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <_free_r+0x94>)
 800167c:	9801      	ldr	r0, [sp, #4]
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	b933      	cbnz	r3, 8001690 <_free_r+0x30>
 8001682:	6063      	str	r3, [r4, #4]
 8001684:	6014      	str	r4, [r2, #0]
 8001686:	b003      	add	sp, #12
 8001688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800168c:	f000 b8da 	b.w	8001844 <__malloc_unlock>
 8001690:	42a3      	cmp	r3, r4
 8001692:	d908      	bls.n	80016a6 <_free_r+0x46>
 8001694:	6825      	ldr	r5, [r4, #0]
 8001696:	1961      	adds	r1, r4, r5
 8001698:	428b      	cmp	r3, r1
 800169a:	bf01      	itttt	eq
 800169c:	6819      	ldreq	r1, [r3, #0]
 800169e:	685b      	ldreq	r3, [r3, #4]
 80016a0:	1949      	addeq	r1, r1, r5
 80016a2:	6021      	streq	r1, [r4, #0]
 80016a4:	e7ed      	b.n	8001682 <_free_r+0x22>
 80016a6:	461a      	mov	r2, r3
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b10b      	cbz	r3, 80016b0 <_free_r+0x50>
 80016ac:	42a3      	cmp	r3, r4
 80016ae:	d9fa      	bls.n	80016a6 <_free_r+0x46>
 80016b0:	6811      	ldr	r1, [r2, #0]
 80016b2:	1855      	adds	r5, r2, r1
 80016b4:	42a5      	cmp	r5, r4
 80016b6:	d10b      	bne.n	80016d0 <_free_r+0x70>
 80016b8:	6824      	ldr	r4, [r4, #0]
 80016ba:	4421      	add	r1, r4
 80016bc:	1854      	adds	r4, r2, r1
 80016be:	42a3      	cmp	r3, r4
 80016c0:	6011      	str	r1, [r2, #0]
 80016c2:	d1e0      	bne.n	8001686 <_free_r+0x26>
 80016c4:	681c      	ldr	r4, [r3, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	6053      	str	r3, [r2, #4]
 80016ca:	440c      	add	r4, r1
 80016cc:	6014      	str	r4, [r2, #0]
 80016ce:	e7da      	b.n	8001686 <_free_r+0x26>
 80016d0:	d902      	bls.n	80016d8 <_free_r+0x78>
 80016d2:	230c      	movs	r3, #12
 80016d4:	6003      	str	r3, [r0, #0]
 80016d6:	e7d6      	b.n	8001686 <_free_r+0x26>
 80016d8:	6825      	ldr	r5, [r4, #0]
 80016da:	1961      	adds	r1, r4, r5
 80016dc:	428b      	cmp	r3, r1
 80016de:	bf04      	itt	eq
 80016e0:	6819      	ldreq	r1, [r3, #0]
 80016e2:	685b      	ldreq	r3, [r3, #4]
 80016e4:	6063      	str	r3, [r4, #4]
 80016e6:	bf04      	itt	eq
 80016e8:	1949      	addeq	r1, r1, r5
 80016ea:	6021      	streq	r1, [r4, #0]
 80016ec:	6054      	str	r4, [r2, #4]
 80016ee:	e7ca      	b.n	8001686 <_free_r+0x26>
 80016f0:	b003      	add	sp, #12
 80016f2:	bd30      	pop	{r4, r5, pc}
 80016f4:	200003dc 	.word	0x200003dc

080016f8 <sbrk_aligned>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	4e0e      	ldr	r6, [pc, #56]	; (8001734 <sbrk_aligned+0x3c>)
 80016fc:	460c      	mov	r4, r1
 80016fe:	6831      	ldr	r1, [r6, #0]
 8001700:	4605      	mov	r5, r0
 8001702:	b911      	cbnz	r1, 800170a <sbrk_aligned+0x12>
 8001704:	f000 fcbc 	bl	8002080 <_sbrk_r>
 8001708:	6030      	str	r0, [r6, #0]
 800170a:	4621      	mov	r1, r4
 800170c:	4628      	mov	r0, r5
 800170e:	f000 fcb7 	bl	8002080 <_sbrk_r>
 8001712:	1c43      	adds	r3, r0, #1
 8001714:	d00a      	beq.n	800172c <sbrk_aligned+0x34>
 8001716:	1cc4      	adds	r4, r0, #3
 8001718:	f024 0403 	bic.w	r4, r4, #3
 800171c:	42a0      	cmp	r0, r4
 800171e:	d007      	beq.n	8001730 <sbrk_aligned+0x38>
 8001720:	1a21      	subs	r1, r4, r0
 8001722:	4628      	mov	r0, r5
 8001724:	f000 fcac 	bl	8002080 <_sbrk_r>
 8001728:	3001      	adds	r0, #1
 800172a:	d101      	bne.n	8001730 <sbrk_aligned+0x38>
 800172c:	f04f 34ff 	mov.w	r4, #4294967295
 8001730:	4620      	mov	r0, r4
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	200003e0 	.word	0x200003e0

08001738 <_malloc_r>:
 8001738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800173c:	1ccd      	adds	r5, r1, #3
 800173e:	f025 0503 	bic.w	r5, r5, #3
 8001742:	3508      	adds	r5, #8
 8001744:	2d0c      	cmp	r5, #12
 8001746:	bf38      	it	cc
 8001748:	250c      	movcc	r5, #12
 800174a:	2d00      	cmp	r5, #0
 800174c:	4607      	mov	r7, r0
 800174e:	db01      	blt.n	8001754 <_malloc_r+0x1c>
 8001750:	42a9      	cmp	r1, r5
 8001752:	d905      	bls.n	8001760 <_malloc_r+0x28>
 8001754:	230c      	movs	r3, #12
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	2600      	movs	r6, #0
 800175a:	4630      	mov	r0, r6
 800175c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001760:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001834 <_malloc_r+0xfc>
 8001764:	f000 f868 	bl	8001838 <__malloc_lock>
 8001768:	f8d8 3000 	ldr.w	r3, [r8]
 800176c:	461c      	mov	r4, r3
 800176e:	bb5c      	cbnz	r4, 80017c8 <_malloc_r+0x90>
 8001770:	4629      	mov	r1, r5
 8001772:	4638      	mov	r0, r7
 8001774:	f7ff ffc0 	bl	80016f8 <sbrk_aligned>
 8001778:	1c43      	adds	r3, r0, #1
 800177a:	4604      	mov	r4, r0
 800177c:	d155      	bne.n	800182a <_malloc_r+0xf2>
 800177e:	f8d8 4000 	ldr.w	r4, [r8]
 8001782:	4626      	mov	r6, r4
 8001784:	2e00      	cmp	r6, #0
 8001786:	d145      	bne.n	8001814 <_malloc_r+0xdc>
 8001788:	2c00      	cmp	r4, #0
 800178a:	d048      	beq.n	800181e <_malloc_r+0xe6>
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	4631      	mov	r1, r6
 8001790:	4638      	mov	r0, r7
 8001792:	eb04 0903 	add.w	r9, r4, r3
 8001796:	f000 fc73 	bl	8002080 <_sbrk_r>
 800179a:	4581      	cmp	r9, r0
 800179c:	d13f      	bne.n	800181e <_malloc_r+0xe6>
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	1a6d      	subs	r5, r5, r1
 80017a2:	4629      	mov	r1, r5
 80017a4:	4638      	mov	r0, r7
 80017a6:	f7ff ffa7 	bl	80016f8 <sbrk_aligned>
 80017aa:	3001      	adds	r0, #1
 80017ac:	d037      	beq.n	800181e <_malloc_r+0xe6>
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	442b      	add	r3, r5
 80017b2:	6023      	str	r3, [r4, #0]
 80017b4:	f8d8 3000 	ldr.w	r3, [r8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d038      	beq.n	800182e <_malloc_r+0xf6>
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	42a2      	cmp	r2, r4
 80017c0:	d12b      	bne.n	800181a <_malloc_r+0xe2>
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e00f      	b.n	80017e8 <_malloc_r+0xb0>
 80017c8:	6822      	ldr	r2, [r4, #0]
 80017ca:	1b52      	subs	r2, r2, r5
 80017cc:	d41f      	bmi.n	800180e <_malloc_r+0xd6>
 80017ce:	2a0b      	cmp	r2, #11
 80017d0:	d917      	bls.n	8001802 <_malloc_r+0xca>
 80017d2:	1961      	adds	r1, r4, r5
 80017d4:	42a3      	cmp	r3, r4
 80017d6:	6025      	str	r5, [r4, #0]
 80017d8:	bf18      	it	ne
 80017da:	6059      	strne	r1, [r3, #4]
 80017dc:	6863      	ldr	r3, [r4, #4]
 80017de:	bf08      	it	eq
 80017e0:	f8c8 1000 	streq.w	r1, [r8]
 80017e4:	5162      	str	r2, [r4, r5]
 80017e6:	604b      	str	r3, [r1, #4]
 80017e8:	4638      	mov	r0, r7
 80017ea:	f104 060b 	add.w	r6, r4, #11
 80017ee:	f000 f829 	bl	8001844 <__malloc_unlock>
 80017f2:	f026 0607 	bic.w	r6, r6, #7
 80017f6:	1d23      	adds	r3, r4, #4
 80017f8:	1af2      	subs	r2, r6, r3
 80017fa:	d0ae      	beq.n	800175a <_malloc_r+0x22>
 80017fc:	1b9b      	subs	r3, r3, r6
 80017fe:	50a3      	str	r3, [r4, r2]
 8001800:	e7ab      	b.n	800175a <_malloc_r+0x22>
 8001802:	42a3      	cmp	r3, r4
 8001804:	6862      	ldr	r2, [r4, #4]
 8001806:	d1dd      	bne.n	80017c4 <_malloc_r+0x8c>
 8001808:	f8c8 2000 	str.w	r2, [r8]
 800180c:	e7ec      	b.n	80017e8 <_malloc_r+0xb0>
 800180e:	4623      	mov	r3, r4
 8001810:	6864      	ldr	r4, [r4, #4]
 8001812:	e7ac      	b.n	800176e <_malloc_r+0x36>
 8001814:	4634      	mov	r4, r6
 8001816:	6876      	ldr	r6, [r6, #4]
 8001818:	e7b4      	b.n	8001784 <_malloc_r+0x4c>
 800181a:	4613      	mov	r3, r2
 800181c:	e7cc      	b.n	80017b8 <_malloc_r+0x80>
 800181e:	230c      	movs	r3, #12
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4638      	mov	r0, r7
 8001824:	f000 f80e 	bl	8001844 <__malloc_unlock>
 8001828:	e797      	b.n	800175a <_malloc_r+0x22>
 800182a:	6025      	str	r5, [r4, #0]
 800182c:	e7dc      	b.n	80017e8 <_malloc_r+0xb0>
 800182e:	605b      	str	r3, [r3, #4]
 8001830:	deff      	udf	#255	; 0xff
 8001832:	bf00      	nop
 8001834:	200003dc 	.word	0x200003dc

08001838 <__malloc_lock>:
 8001838:	4801      	ldr	r0, [pc, #4]	; (8001840 <__malloc_lock+0x8>)
 800183a:	f7ff bf0e 	b.w	800165a <__retarget_lock_acquire_recursive>
 800183e:	bf00      	nop
 8001840:	200003d8 	.word	0x200003d8

08001844 <__malloc_unlock>:
 8001844:	4801      	ldr	r0, [pc, #4]	; (800184c <__malloc_unlock+0x8>)
 8001846:	f7ff bf09 	b.w	800165c <__retarget_lock_release_recursive>
 800184a:	bf00      	nop
 800184c:	200003d8 	.word	0x200003d8

08001850 <__sfputc_r>:
 8001850:	6893      	ldr	r3, [r2, #8]
 8001852:	3b01      	subs	r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	b410      	push	{r4}
 8001858:	6093      	str	r3, [r2, #8]
 800185a:	da08      	bge.n	800186e <__sfputc_r+0x1e>
 800185c:	6994      	ldr	r4, [r2, #24]
 800185e:	42a3      	cmp	r3, r4
 8001860:	db01      	blt.n	8001866 <__sfputc_r+0x16>
 8001862:	290a      	cmp	r1, #10
 8001864:	d103      	bne.n	800186e <__sfputc_r+0x1e>
 8001866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800186a:	f000 bb73 	b.w	8001f54 <__swbuf_r>
 800186e:	6813      	ldr	r3, [r2, #0]
 8001870:	1c58      	adds	r0, r3, #1
 8001872:	6010      	str	r0, [r2, #0]
 8001874:	7019      	strb	r1, [r3, #0]
 8001876:	4608      	mov	r0, r1
 8001878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800187c:	4770      	bx	lr

0800187e <__sfputs_r>:
 800187e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001880:	4606      	mov	r6, r0
 8001882:	460f      	mov	r7, r1
 8001884:	4614      	mov	r4, r2
 8001886:	18d5      	adds	r5, r2, r3
 8001888:	42ac      	cmp	r4, r5
 800188a:	d101      	bne.n	8001890 <__sfputs_r+0x12>
 800188c:	2000      	movs	r0, #0
 800188e:	e007      	b.n	80018a0 <__sfputs_r+0x22>
 8001890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001894:	463a      	mov	r2, r7
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff ffda 	bl	8001850 <__sfputc_r>
 800189c:	1c43      	adds	r3, r0, #1
 800189e:	d1f3      	bne.n	8001888 <__sfputs_r+0xa>
 80018a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018a4 <_vfiprintf_r>:
 80018a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018a8:	460d      	mov	r5, r1
 80018aa:	b09d      	sub	sp, #116	; 0x74
 80018ac:	4614      	mov	r4, r2
 80018ae:	4698      	mov	r8, r3
 80018b0:	4606      	mov	r6, r0
 80018b2:	b118      	cbz	r0, 80018bc <_vfiprintf_r+0x18>
 80018b4:	6a03      	ldr	r3, [r0, #32]
 80018b6:	b90b      	cbnz	r3, 80018bc <_vfiprintf_r+0x18>
 80018b8:	f7ff fdca 	bl	8001450 <__sinit>
 80018bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018be:	07d9      	lsls	r1, r3, #31
 80018c0:	d405      	bmi.n	80018ce <_vfiprintf_r+0x2a>
 80018c2:	89ab      	ldrh	r3, [r5, #12]
 80018c4:	059a      	lsls	r2, r3, #22
 80018c6:	d402      	bmi.n	80018ce <_vfiprintf_r+0x2a>
 80018c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018ca:	f7ff fec6 	bl	800165a <__retarget_lock_acquire_recursive>
 80018ce:	89ab      	ldrh	r3, [r5, #12]
 80018d0:	071b      	lsls	r3, r3, #28
 80018d2:	d501      	bpl.n	80018d8 <_vfiprintf_r+0x34>
 80018d4:	692b      	ldr	r3, [r5, #16]
 80018d6:	b99b      	cbnz	r3, 8001900 <_vfiprintf_r+0x5c>
 80018d8:	4629      	mov	r1, r5
 80018da:	4630      	mov	r0, r6
 80018dc:	f000 fb78 	bl	8001fd0 <__swsetup_r>
 80018e0:	b170      	cbz	r0, 8001900 <_vfiprintf_r+0x5c>
 80018e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80018e4:	07dc      	lsls	r4, r3, #31
 80018e6:	d504      	bpl.n	80018f2 <_vfiprintf_r+0x4e>
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	b01d      	add	sp, #116	; 0x74
 80018ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018f2:	89ab      	ldrh	r3, [r5, #12]
 80018f4:	0598      	lsls	r0, r3, #22
 80018f6:	d4f7      	bmi.n	80018e8 <_vfiprintf_r+0x44>
 80018f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018fa:	f7ff feaf 	bl	800165c <__retarget_lock_release_recursive>
 80018fe:	e7f3      	b.n	80018e8 <_vfiprintf_r+0x44>
 8001900:	2300      	movs	r3, #0
 8001902:	9309      	str	r3, [sp, #36]	; 0x24
 8001904:	2320      	movs	r3, #32
 8001906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800190a:	f8cd 800c 	str.w	r8, [sp, #12]
 800190e:	2330      	movs	r3, #48	; 0x30
 8001910:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001ac4 <_vfiprintf_r+0x220>
 8001914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001918:	f04f 0901 	mov.w	r9, #1
 800191c:	4623      	mov	r3, r4
 800191e:	469a      	mov	sl, r3
 8001920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001924:	b10a      	cbz	r2, 800192a <_vfiprintf_r+0x86>
 8001926:	2a25      	cmp	r2, #37	; 0x25
 8001928:	d1f9      	bne.n	800191e <_vfiprintf_r+0x7a>
 800192a:	ebba 0b04 	subs.w	fp, sl, r4
 800192e:	d00b      	beq.n	8001948 <_vfiprintf_r+0xa4>
 8001930:	465b      	mov	r3, fp
 8001932:	4622      	mov	r2, r4
 8001934:	4629      	mov	r1, r5
 8001936:	4630      	mov	r0, r6
 8001938:	f7ff ffa1 	bl	800187e <__sfputs_r>
 800193c:	3001      	adds	r0, #1
 800193e:	f000 80a9 	beq.w	8001a94 <_vfiprintf_r+0x1f0>
 8001942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001944:	445a      	add	r2, fp
 8001946:	9209      	str	r2, [sp, #36]	; 0x24
 8001948:	f89a 3000 	ldrb.w	r3, [sl]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a1 	beq.w	8001a94 <_vfiprintf_r+0x1f0>
 8001952:	2300      	movs	r3, #0
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800195c:	f10a 0a01 	add.w	sl, sl, #1
 8001960:	9304      	str	r3, [sp, #16]
 8001962:	9307      	str	r3, [sp, #28]
 8001964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001968:	931a      	str	r3, [sp, #104]	; 0x68
 800196a:	4654      	mov	r4, sl
 800196c:	2205      	movs	r2, #5
 800196e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001972:	4854      	ldr	r0, [pc, #336]	; (8001ac4 <_vfiprintf_r+0x220>)
 8001974:	f7fe fc5c 	bl	8000230 <memchr>
 8001978:	9a04      	ldr	r2, [sp, #16]
 800197a:	b9d8      	cbnz	r0, 80019b4 <_vfiprintf_r+0x110>
 800197c:	06d1      	lsls	r1, r2, #27
 800197e:	bf44      	itt	mi
 8001980:	2320      	movmi	r3, #32
 8001982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001986:	0713      	lsls	r3, r2, #28
 8001988:	bf44      	itt	mi
 800198a:	232b      	movmi	r3, #43	; 0x2b
 800198c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001990:	f89a 3000 	ldrb.w	r3, [sl]
 8001994:	2b2a      	cmp	r3, #42	; 0x2a
 8001996:	d015      	beq.n	80019c4 <_vfiprintf_r+0x120>
 8001998:	9a07      	ldr	r2, [sp, #28]
 800199a:	4654      	mov	r4, sl
 800199c:	2000      	movs	r0, #0
 800199e:	f04f 0c0a 	mov.w	ip, #10
 80019a2:	4621      	mov	r1, r4
 80019a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019a8:	3b30      	subs	r3, #48	; 0x30
 80019aa:	2b09      	cmp	r3, #9
 80019ac:	d94d      	bls.n	8001a4a <_vfiprintf_r+0x1a6>
 80019ae:	b1b0      	cbz	r0, 80019de <_vfiprintf_r+0x13a>
 80019b0:	9207      	str	r2, [sp, #28]
 80019b2:	e014      	b.n	80019de <_vfiprintf_r+0x13a>
 80019b4:	eba0 0308 	sub.w	r3, r0, r8
 80019b8:	fa09 f303 	lsl.w	r3, r9, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	9304      	str	r3, [sp, #16]
 80019c0:	46a2      	mov	sl, r4
 80019c2:	e7d2      	b.n	800196a <_vfiprintf_r+0xc6>
 80019c4:	9b03      	ldr	r3, [sp, #12]
 80019c6:	1d19      	adds	r1, r3, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	9103      	str	r1, [sp, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfbb      	ittet	lt
 80019d0:	425b      	neglt	r3, r3
 80019d2:	f042 0202 	orrlt.w	r2, r2, #2
 80019d6:	9307      	strge	r3, [sp, #28]
 80019d8:	9307      	strlt	r3, [sp, #28]
 80019da:	bfb8      	it	lt
 80019dc:	9204      	strlt	r2, [sp, #16]
 80019de:	7823      	ldrb	r3, [r4, #0]
 80019e0:	2b2e      	cmp	r3, #46	; 0x2e
 80019e2:	d10c      	bne.n	80019fe <_vfiprintf_r+0x15a>
 80019e4:	7863      	ldrb	r3, [r4, #1]
 80019e6:	2b2a      	cmp	r3, #42	; 0x2a
 80019e8:	d134      	bne.n	8001a54 <_vfiprintf_r+0x1b0>
 80019ea:	9b03      	ldr	r3, [sp, #12]
 80019ec:	1d1a      	adds	r2, r3, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	9203      	str	r2, [sp, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bfb8      	it	lt
 80019f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80019fa:	3402      	adds	r4, #2
 80019fc:	9305      	str	r3, [sp, #20]
 80019fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001ad4 <_vfiprintf_r+0x230>
 8001a02:	7821      	ldrb	r1, [r4, #0]
 8001a04:	2203      	movs	r2, #3
 8001a06:	4650      	mov	r0, sl
 8001a08:	f7fe fc12 	bl	8000230 <memchr>
 8001a0c:	b138      	cbz	r0, 8001a1e <_vfiprintf_r+0x17a>
 8001a0e:	9b04      	ldr	r3, [sp, #16]
 8001a10:	eba0 000a 	sub.w	r0, r0, sl
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	4082      	lsls	r2, r0
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	3401      	adds	r4, #1
 8001a1c:	9304      	str	r3, [sp, #16]
 8001a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a22:	4829      	ldr	r0, [pc, #164]	; (8001ac8 <_vfiprintf_r+0x224>)
 8001a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a28:	2206      	movs	r2, #6
 8001a2a:	f7fe fc01 	bl	8000230 <memchr>
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	d03f      	beq.n	8001ab2 <_vfiprintf_r+0x20e>
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <_vfiprintf_r+0x228>)
 8001a34:	bb1b      	cbnz	r3, 8001a7e <_vfiprintf_r+0x1da>
 8001a36:	9b03      	ldr	r3, [sp, #12]
 8001a38:	3307      	adds	r3, #7
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	3308      	adds	r3, #8
 8001a40:	9303      	str	r3, [sp, #12]
 8001a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a44:	443b      	add	r3, r7
 8001a46:	9309      	str	r3, [sp, #36]	; 0x24
 8001a48:	e768      	b.n	800191c <_vfiprintf_r+0x78>
 8001a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a4e:	460c      	mov	r4, r1
 8001a50:	2001      	movs	r0, #1
 8001a52:	e7a6      	b.n	80019a2 <_vfiprintf_r+0xfe>
 8001a54:	2300      	movs	r3, #0
 8001a56:	3401      	adds	r4, #1
 8001a58:	9305      	str	r3, [sp, #20]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0c0a 	mov.w	ip, #10
 8001a60:	4620      	mov	r0, r4
 8001a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a66:	3a30      	subs	r2, #48	; 0x30
 8001a68:	2a09      	cmp	r2, #9
 8001a6a:	d903      	bls.n	8001a74 <_vfiprintf_r+0x1d0>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0c6      	beq.n	80019fe <_vfiprintf_r+0x15a>
 8001a70:	9105      	str	r1, [sp, #20]
 8001a72:	e7c4      	b.n	80019fe <_vfiprintf_r+0x15a>
 8001a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a78:	4604      	mov	r4, r0
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e7f0      	b.n	8001a60 <_vfiprintf_r+0x1bc>
 8001a7e:	ab03      	add	r3, sp, #12
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	462a      	mov	r2, r5
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <_vfiprintf_r+0x22c>)
 8001a86:	a904      	add	r1, sp, #16
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f3af 8000 	nop.w
 8001a8e:	4607      	mov	r7, r0
 8001a90:	1c78      	adds	r0, r7, #1
 8001a92:	d1d6      	bne.n	8001a42 <_vfiprintf_r+0x19e>
 8001a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a96:	07d9      	lsls	r1, r3, #31
 8001a98:	d405      	bmi.n	8001aa6 <_vfiprintf_r+0x202>
 8001a9a:	89ab      	ldrh	r3, [r5, #12]
 8001a9c:	059a      	lsls	r2, r3, #22
 8001a9e:	d402      	bmi.n	8001aa6 <_vfiprintf_r+0x202>
 8001aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001aa2:	f7ff fddb 	bl	800165c <__retarget_lock_release_recursive>
 8001aa6:	89ab      	ldrh	r3, [r5, #12]
 8001aa8:	065b      	lsls	r3, r3, #25
 8001aaa:	f53f af1d 	bmi.w	80018e8 <_vfiprintf_r+0x44>
 8001aae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ab0:	e71c      	b.n	80018ec <_vfiprintf_r+0x48>
 8001ab2:	ab03      	add	r3, sp, #12
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	462a      	mov	r2, r5
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <_vfiprintf_r+0x22c>)
 8001aba:	a904      	add	r1, sp, #16
 8001abc:	4630      	mov	r0, r6
 8001abe:	f000 f879 	bl	8001bb4 <_printf_i>
 8001ac2:	e7e4      	b.n	8001a8e <_vfiprintf_r+0x1ea>
 8001ac4:	080021d8 	.word	0x080021d8
 8001ac8:	080021e2 	.word	0x080021e2
 8001acc:	00000000 	.word	0x00000000
 8001ad0:	0800187f 	.word	0x0800187f
 8001ad4:	080021de 	.word	0x080021de

08001ad8 <_printf_common>:
 8001ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001adc:	4616      	mov	r6, r2
 8001ade:	4699      	mov	r9, r3
 8001ae0:	688a      	ldr	r2, [r1, #8]
 8001ae2:	690b      	ldr	r3, [r1, #16]
 8001ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	bfb8      	it	lt
 8001aec:	4613      	movlt	r3, r2
 8001aee:	6033      	str	r3, [r6, #0]
 8001af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001af4:	4607      	mov	r7, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	b10a      	cbz	r2, 8001afe <_printf_common+0x26>
 8001afa:	3301      	adds	r3, #1
 8001afc:	6033      	str	r3, [r6, #0]
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	0699      	lsls	r1, r3, #26
 8001b02:	bf42      	ittt	mi
 8001b04:	6833      	ldrmi	r3, [r6, #0]
 8001b06:	3302      	addmi	r3, #2
 8001b08:	6033      	strmi	r3, [r6, #0]
 8001b0a:	6825      	ldr	r5, [r4, #0]
 8001b0c:	f015 0506 	ands.w	r5, r5, #6
 8001b10:	d106      	bne.n	8001b20 <_printf_common+0x48>
 8001b12:	f104 0a19 	add.w	sl, r4, #25
 8001b16:	68e3      	ldr	r3, [r4, #12]
 8001b18:	6832      	ldr	r2, [r6, #0]
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	42ab      	cmp	r3, r5
 8001b1e:	dc26      	bgt.n	8001b6e <_printf_common+0x96>
 8001b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001b24:	1e13      	subs	r3, r2, #0
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	bf18      	it	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	0692      	lsls	r2, r2, #26
 8001b2e:	d42b      	bmi.n	8001b88 <_printf_common+0xb0>
 8001b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b34:	4649      	mov	r1, r9
 8001b36:	4638      	mov	r0, r7
 8001b38:	47c0      	blx	r8
 8001b3a:	3001      	adds	r0, #1
 8001b3c:	d01e      	beq.n	8001b7c <_printf_common+0xa4>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	6922      	ldr	r2, [r4, #16]
 8001b42:	f003 0306 	and.w	r3, r3, #6
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	bf02      	ittt	eq
 8001b4a:	68e5      	ldreq	r5, [r4, #12]
 8001b4c:	6833      	ldreq	r3, [r6, #0]
 8001b4e:	1aed      	subeq	r5, r5, r3
 8001b50:	68a3      	ldr	r3, [r4, #8]
 8001b52:	bf0c      	ite	eq
 8001b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b58:	2500      	movne	r5, #0
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	bfc4      	itt	gt
 8001b5e:	1a9b      	subgt	r3, r3, r2
 8001b60:	18ed      	addgt	r5, r5, r3
 8001b62:	2600      	movs	r6, #0
 8001b64:	341a      	adds	r4, #26
 8001b66:	42b5      	cmp	r5, r6
 8001b68:	d11a      	bne.n	8001ba0 <_printf_common+0xc8>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	e008      	b.n	8001b80 <_printf_common+0xa8>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	4652      	mov	r2, sl
 8001b72:	4649      	mov	r1, r9
 8001b74:	4638      	mov	r0, r7
 8001b76:	47c0      	blx	r8
 8001b78:	3001      	adds	r0, #1
 8001b7a:	d103      	bne.n	8001b84 <_printf_common+0xac>
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b84:	3501      	adds	r5, #1
 8001b86:	e7c6      	b.n	8001b16 <_printf_common+0x3e>
 8001b88:	18e1      	adds	r1, r4, r3
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	2030      	movs	r0, #48	; 0x30
 8001b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b92:	4422      	add	r2, r4
 8001b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	e7c7      	b.n	8001b30 <_printf_common+0x58>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	4638      	mov	r0, r7
 8001ba8:	47c0      	blx	r8
 8001baa:	3001      	adds	r0, #1
 8001bac:	d0e6      	beq.n	8001b7c <_printf_common+0xa4>
 8001bae:	3601      	adds	r6, #1
 8001bb0:	e7d9      	b.n	8001b66 <_printf_common+0x8e>
	...

08001bb4 <_printf_i>:
 8001bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bb8:	7e0f      	ldrb	r7, [r1, #24]
 8001bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001bbc:	2f78      	cmp	r7, #120	; 0x78
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	4680      	mov	r8, r0
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	469a      	mov	sl, r3
 8001bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001bca:	d807      	bhi.n	8001bdc <_printf_i+0x28>
 8001bcc:	2f62      	cmp	r7, #98	; 0x62
 8001bce:	d80a      	bhi.n	8001be6 <_printf_i+0x32>
 8001bd0:	2f00      	cmp	r7, #0
 8001bd2:	f000 80d4 	beq.w	8001d7e <_printf_i+0x1ca>
 8001bd6:	2f58      	cmp	r7, #88	; 0x58
 8001bd8:	f000 80c0 	beq.w	8001d5c <_printf_i+0x1a8>
 8001bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001be4:	e03a      	b.n	8001c5c <_printf_i+0xa8>
 8001be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001bea:	2b15      	cmp	r3, #21
 8001bec:	d8f6      	bhi.n	8001bdc <_printf_i+0x28>
 8001bee:	a101      	add	r1, pc, #4	; (adr r1, 8001bf4 <_printf_i+0x40>)
 8001bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001bf4:	08001c4d 	.word	0x08001c4d
 8001bf8:	08001c61 	.word	0x08001c61
 8001bfc:	08001bdd 	.word	0x08001bdd
 8001c00:	08001bdd 	.word	0x08001bdd
 8001c04:	08001bdd 	.word	0x08001bdd
 8001c08:	08001bdd 	.word	0x08001bdd
 8001c0c:	08001c61 	.word	0x08001c61
 8001c10:	08001bdd 	.word	0x08001bdd
 8001c14:	08001bdd 	.word	0x08001bdd
 8001c18:	08001bdd 	.word	0x08001bdd
 8001c1c:	08001bdd 	.word	0x08001bdd
 8001c20:	08001d65 	.word	0x08001d65
 8001c24:	08001c8d 	.word	0x08001c8d
 8001c28:	08001d1f 	.word	0x08001d1f
 8001c2c:	08001bdd 	.word	0x08001bdd
 8001c30:	08001bdd 	.word	0x08001bdd
 8001c34:	08001d87 	.word	0x08001d87
 8001c38:	08001bdd 	.word	0x08001bdd
 8001c3c:	08001c8d 	.word	0x08001c8d
 8001c40:	08001bdd 	.word	0x08001bdd
 8001c44:	08001bdd 	.word	0x08001bdd
 8001c48:	08001d27 	.word	0x08001d27
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	1d1a      	adds	r2, r3, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	602a      	str	r2, [r5, #0]
 8001c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e09f      	b.n	8001da0 <_printf_i+0x1ec>
 8001c60:	6820      	ldr	r0, [r4, #0]
 8001c62:	682b      	ldr	r3, [r5, #0]
 8001c64:	0607      	lsls	r7, r0, #24
 8001c66:	f103 0104 	add.w	r1, r3, #4
 8001c6a:	6029      	str	r1, [r5, #0]
 8001c6c:	d501      	bpl.n	8001c72 <_printf_i+0xbe>
 8001c6e:	681e      	ldr	r6, [r3, #0]
 8001c70:	e003      	b.n	8001c7a <_printf_i+0xc6>
 8001c72:	0646      	lsls	r6, r0, #25
 8001c74:	d5fb      	bpl.n	8001c6e <_printf_i+0xba>
 8001c76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001c7a:	2e00      	cmp	r6, #0
 8001c7c:	da03      	bge.n	8001c86 <_printf_i+0xd2>
 8001c7e:	232d      	movs	r3, #45	; 0x2d
 8001c80:	4276      	negs	r6, r6
 8001c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c86:	485a      	ldr	r0, [pc, #360]	; (8001df0 <_printf_i+0x23c>)
 8001c88:	230a      	movs	r3, #10
 8001c8a:	e012      	b.n	8001cb2 <_printf_i+0xfe>
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	1d19      	adds	r1, r3, #4
 8001c92:	6029      	str	r1, [r5, #0]
 8001c94:	0605      	lsls	r5, r0, #24
 8001c96:	d501      	bpl.n	8001c9c <_printf_i+0xe8>
 8001c98:	681e      	ldr	r6, [r3, #0]
 8001c9a:	e002      	b.n	8001ca2 <_printf_i+0xee>
 8001c9c:	0641      	lsls	r1, r0, #25
 8001c9e:	d5fb      	bpl.n	8001c98 <_printf_i+0xe4>
 8001ca0:	881e      	ldrh	r6, [r3, #0]
 8001ca2:	4853      	ldr	r0, [pc, #332]	; (8001df0 <_printf_i+0x23c>)
 8001ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2308      	moveq	r3, #8
 8001caa:	230a      	movne	r3, #10
 8001cac:	2100      	movs	r1, #0
 8001cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cb2:	6865      	ldr	r5, [r4, #4]
 8001cb4:	60a5      	str	r5, [r4, #8]
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	bfa2      	ittt	ge
 8001cba:	6821      	ldrge	r1, [r4, #0]
 8001cbc:	f021 0104 	bicge.w	r1, r1, #4
 8001cc0:	6021      	strge	r1, [r4, #0]
 8001cc2:	b90e      	cbnz	r6, 8001cc8 <_printf_i+0x114>
 8001cc4:	2d00      	cmp	r5, #0
 8001cc6:	d04b      	beq.n	8001d60 <_printf_i+0x1ac>
 8001cc8:	4615      	mov	r5, r2
 8001cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8001cce:	fb03 6711 	mls	r7, r3, r1, r6
 8001cd2:	5dc7      	ldrb	r7, [r0, r7]
 8001cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001cd8:	4637      	mov	r7, r6
 8001cda:	42bb      	cmp	r3, r7
 8001cdc:	460e      	mov	r6, r1
 8001cde:	d9f4      	bls.n	8001cca <_printf_i+0x116>
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d10b      	bne.n	8001cfc <_printf_i+0x148>
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	07de      	lsls	r6, r3, #31
 8001ce8:	d508      	bpl.n	8001cfc <_printf_i+0x148>
 8001cea:	6923      	ldr	r3, [r4, #16]
 8001cec:	6861      	ldr	r1, [r4, #4]
 8001cee:	4299      	cmp	r1, r3
 8001cf0:	bfde      	ittt	le
 8001cf2:	2330      	movle	r3, #48	; 0x30
 8001cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cfc:	1b52      	subs	r2, r2, r5
 8001cfe:	6122      	str	r2, [r4, #16]
 8001d00:	f8cd a000 	str.w	sl, [sp]
 8001d04:	464b      	mov	r3, r9
 8001d06:	aa03      	add	r2, sp, #12
 8001d08:	4621      	mov	r1, r4
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	f7ff fee4 	bl	8001ad8 <_printf_common>
 8001d10:	3001      	adds	r0, #1
 8001d12:	d14a      	bne.n	8001daa <_printf_i+0x1f6>
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	b004      	add	sp, #16
 8001d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	f043 0320 	orr.w	r3, r3, #32
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	4833      	ldr	r0, [pc, #204]	; (8001df4 <_printf_i+0x240>)
 8001d28:	2778      	movs	r7, #120	; 0x78
 8001d2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	6829      	ldr	r1, [r5, #0]
 8001d32:	061f      	lsls	r7, r3, #24
 8001d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8001d38:	d402      	bmi.n	8001d40 <_printf_i+0x18c>
 8001d3a:	065f      	lsls	r7, r3, #25
 8001d3c:	bf48      	it	mi
 8001d3e:	b2b6      	uxthmi	r6, r6
 8001d40:	07df      	lsls	r7, r3, #31
 8001d42:	bf48      	it	mi
 8001d44:	f043 0320 	orrmi.w	r3, r3, #32
 8001d48:	6029      	str	r1, [r5, #0]
 8001d4a:	bf48      	it	mi
 8001d4c:	6023      	strmi	r3, [r4, #0]
 8001d4e:	b91e      	cbnz	r6, 8001d58 <_printf_i+0x1a4>
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	f023 0320 	bic.w	r3, r3, #32
 8001d56:	6023      	str	r3, [r4, #0]
 8001d58:	2310      	movs	r3, #16
 8001d5a:	e7a7      	b.n	8001cac <_printf_i+0xf8>
 8001d5c:	4824      	ldr	r0, [pc, #144]	; (8001df0 <_printf_i+0x23c>)
 8001d5e:	e7e4      	b.n	8001d2a <_printf_i+0x176>
 8001d60:	4615      	mov	r5, r2
 8001d62:	e7bd      	b.n	8001ce0 <_printf_i+0x12c>
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	6826      	ldr	r6, [r4, #0]
 8001d68:	6961      	ldr	r1, [r4, #20]
 8001d6a:	1d18      	adds	r0, r3, #4
 8001d6c:	6028      	str	r0, [r5, #0]
 8001d6e:	0635      	lsls	r5, r6, #24
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	d501      	bpl.n	8001d78 <_printf_i+0x1c4>
 8001d74:	6019      	str	r1, [r3, #0]
 8001d76:	e002      	b.n	8001d7e <_printf_i+0x1ca>
 8001d78:	0670      	lsls	r0, r6, #25
 8001d7a:	d5fb      	bpl.n	8001d74 <_printf_i+0x1c0>
 8001d7c:	8019      	strh	r1, [r3, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	6123      	str	r3, [r4, #16]
 8001d82:	4615      	mov	r5, r2
 8001d84:	e7bc      	b.n	8001d00 <_printf_i+0x14c>
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	1d1a      	adds	r2, r3, #4
 8001d8a:	602a      	str	r2, [r5, #0]
 8001d8c:	681d      	ldr	r5, [r3, #0]
 8001d8e:	6862      	ldr	r2, [r4, #4]
 8001d90:	2100      	movs	r1, #0
 8001d92:	4628      	mov	r0, r5
 8001d94:	f7fe fa4c 	bl	8000230 <memchr>
 8001d98:	b108      	cbz	r0, 8001d9e <_printf_i+0x1ea>
 8001d9a:	1b40      	subs	r0, r0, r5
 8001d9c:	6060      	str	r0, [r4, #4]
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	6123      	str	r3, [r4, #16]
 8001da2:	2300      	movs	r3, #0
 8001da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001da8:	e7aa      	b.n	8001d00 <_printf_i+0x14c>
 8001daa:	6923      	ldr	r3, [r4, #16]
 8001dac:	462a      	mov	r2, r5
 8001dae:	4649      	mov	r1, r9
 8001db0:	4640      	mov	r0, r8
 8001db2:	47d0      	blx	sl
 8001db4:	3001      	adds	r0, #1
 8001db6:	d0ad      	beq.n	8001d14 <_printf_i+0x160>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	079b      	lsls	r3, r3, #30
 8001dbc:	d413      	bmi.n	8001de6 <_printf_i+0x232>
 8001dbe:	68e0      	ldr	r0, [r4, #12]
 8001dc0:	9b03      	ldr	r3, [sp, #12]
 8001dc2:	4298      	cmp	r0, r3
 8001dc4:	bfb8      	it	lt
 8001dc6:	4618      	movlt	r0, r3
 8001dc8:	e7a6      	b.n	8001d18 <_printf_i+0x164>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4632      	mov	r2, r6
 8001dce:	4649      	mov	r1, r9
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	47d0      	blx	sl
 8001dd4:	3001      	adds	r0, #1
 8001dd6:	d09d      	beq.n	8001d14 <_printf_i+0x160>
 8001dd8:	3501      	adds	r5, #1
 8001dda:	68e3      	ldr	r3, [r4, #12]
 8001ddc:	9903      	ldr	r1, [sp, #12]
 8001dde:	1a5b      	subs	r3, r3, r1
 8001de0:	42ab      	cmp	r3, r5
 8001de2:	dcf2      	bgt.n	8001dca <_printf_i+0x216>
 8001de4:	e7eb      	b.n	8001dbe <_printf_i+0x20a>
 8001de6:	2500      	movs	r5, #0
 8001de8:	f104 0619 	add.w	r6, r4, #25
 8001dec:	e7f5      	b.n	8001dda <_printf_i+0x226>
 8001dee:	bf00      	nop
 8001df0:	080021e9 	.word	0x080021e9
 8001df4:	080021fa 	.word	0x080021fa

08001df8 <__sflush_r>:
 8001df8:	898a      	ldrh	r2, [r1, #12]
 8001dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfe:	4605      	mov	r5, r0
 8001e00:	0710      	lsls	r0, r2, #28
 8001e02:	460c      	mov	r4, r1
 8001e04:	d458      	bmi.n	8001eb8 <__sflush_r+0xc0>
 8001e06:	684b      	ldr	r3, [r1, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	dc05      	bgt.n	8001e18 <__sflush_r+0x20>
 8001e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	dc02      	bgt.n	8001e18 <__sflush_r+0x20>
 8001e12:	2000      	movs	r0, #0
 8001e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e1a:	2e00      	cmp	r6, #0
 8001e1c:	d0f9      	beq.n	8001e12 <__sflush_r+0x1a>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e24:	682f      	ldr	r7, [r5, #0]
 8001e26:	6a21      	ldr	r1, [r4, #32]
 8001e28:	602b      	str	r3, [r5, #0]
 8001e2a:	d032      	beq.n	8001e92 <__sflush_r+0x9a>
 8001e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	075a      	lsls	r2, r3, #29
 8001e32:	d505      	bpl.n	8001e40 <__sflush_r+0x48>
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	1ac0      	subs	r0, r0, r3
 8001e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e3a:	b10b      	cbz	r3, 8001e40 <__sflush_r+0x48>
 8001e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e3e:	1ac0      	subs	r0, r0, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	4602      	mov	r2, r0
 8001e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e46:	6a21      	ldr	r1, [r4, #32]
 8001e48:	4628      	mov	r0, r5
 8001e4a:	47b0      	blx	r6
 8001e4c:	1c43      	adds	r3, r0, #1
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	d106      	bne.n	8001e60 <__sflush_r+0x68>
 8001e52:	6829      	ldr	r1, [r5, #0]
 8001e54:	291d      	cmp	r1, #29
 8001e56:	d82b      	bhi.n	8001eb0 <__sflush_r+0xb8>
 8001e58:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <__sflush_r+0x108>)
 8001e5a:	410a      	asrs	r2, r1
 8001e5c:	07d6      	lsls	r6, r2, #31
 8001e5e:	d427      	bmi.n	8001eb0 <__sflush_r+0xb8>
 8001e60:	2200      	movs	r2, #0
 8001e62:	6062      	str	r2, [r4, #4]
 8001e64:	04d9      	lsls	r1, r3, #19
 8001e66:	6922      	ldr	r2, [r4, #16]
 8001e68:	6022      	str	r2, [r4, #0]
 8001e6a:	d504      	bpl.n	8001e76 <__sflush_r+0x7e>
 8001e6c:	1c42      	adds	r2, r0, #1
 8001e6e:	d101      	bne.n	8001e74 <__sflush_r+0x7c>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	b903      	cbnz	r3, 8001e76 <__sflush_r+0x7e>
 8001e74:	6560      	str	r0, [r4, #84]	; 0x54
 8001e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e78:	602f      	str	r7, [r5, #0]
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	d0c9      	beq.n	8001e12 <__sflush_r+0x1a>
 8001e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e82:	4299      	cmp	r1, r3
 8001e84:	d002      	beq.n	8001e8c <__sflush_r+0x94>
 8001e86:	4628      	mov	r0, r5
 8001e88:	f7ff fbea 	bl	8001660 <_free_r>
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8001e90:	e7c0      	b.n	8001e14 <__sflush_r+0x1c>
 8001e92:	2301      	movs	r3, #1
 8001e94:	4628      	mov	r0, r5
 8001e96:	47b0      	blx	r6
 8001e98:	1c41      	adds	r1, r0, #1
 8001e9a:	d1c8      	bne.n	8001e2e <__sflush_r+0x36>
 8001e9c:	682b      	ldr	r3, [r5, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0c5      	beq.n	8001e2e <__sflush_r+0x36>
 8001ea2:	2b1d      	cmp	r3, #29
 8001ea4:	d001      	beq.n	8001eaa <__sflush_r+0xb2>
 8001ea6:	2b16      	cmp	r3, #22
 8001ea8:	d101      	bne.n	8001eae <__sflush_r+0xb6>
 8001eaa:	602f      	str	r7, [r5, #0]
 8001eac:	e7b1      	b.n	8001e12 <__sflush_r+0x1a>
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb4:	81a3      	strh	r3, [r4, #12]
 8001eb6:	e7ad      	b.n	8001e14 <__sflush_r+0x1c>
 8001eb8:	690f      	ldr	r7, [r1, #16]
 8001eba:	2f00      	cmp	r7, #0
 8001ebc:	d0a9      	beq.n	8001e12 <__sflush_r+0x1a>
 8001ebe:	0793      	lsls	r3, r2, #30
 8001ec0:	680e      	ldr	r6, [r1, #0]
 8001ec2:	bf08      	it	eq
 8001ec4:	694b      	ldreq	r3, [r1, #20]
 8001ec6:	600f      	str	r7, [r1, #0]
 8001ec8:	bf18      	it	ne
 8001eca:	2300      	movne	r3, #0
 8001ecc:	eba6 0807 	sub.w	r8, r6, r7
 8001ed0:	608b      	str	r3, [r1, #8]
 8001ed2:	f1b8 0f00 	cmp.w	r8, #0
 8001ed6:	dd9c      	ble.n	8001e12 <__sflush_r+0x1a>
 8001ed8:	6a21      	ldr	r1, [r4, #32]
 8001eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001edc:	4643      	mov	r3, r8
 8001ede:	463a      	mov	r2, r7
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	47b0      	blx	r6
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	dc06      	bgt.n	8001ef6 <__sflush_r+0xfe>
 8001ee8:	89a3      	ldrh	r3, [r4, #12]
 8001eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eee:	81a3      	strh	r3, [r4, #12]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	e78e      	b.n	8001e14 <__sflush_r+0x1c>
 8001ef6:	4407      	add	r7, r0
 8001ef8:	eba8 0800 	sub.w	r8, r8, r0
 8001efc:	e7e9      	b.n	8001ed2 <__sflush_r+0xda>
 8001efe:	bf00      	nop
 8001f00:	dfbffffe 	.word	0xdfbffffe

08001f04 <_fflush_r>:
 8001f04:	b538      	push	{r3, r4, r5, lr}
 8001f06:	690b      	ldr	r3, [r1, #16]
 8001f08:	4605      	mov	r5, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	b913      	cbnz	r3, 8001f14 <_fflush_r+0x10>
 8001f0e:	2500      	movs	r5, #0
 8001f10:	4628      	mov	r0, r5
 8001f12:	bd38      	pop	{r3, r4, r5, pc}
 8001f14:	b118      	cbz	r0, 8001f1e <_fflush_r+0x1a>
 8001f16:	6a03      	ldr	r3, [r0, #32]
 8001f18:	b90b      	cbnz	r3, 8001f1e <_fflush_r+0x1a>
 8001f1a:	f7ff fa99 	bl	8001450 <__sinit>
 8001f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f3      	beq.n	8001f0e <_fflush_r+0xa>
 8001f26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f28:	07d0      	lsls	r0, r2, #31
 8001f2a:	d404      	bmi.n	8001f36 <_fflush_r+0x32>
 8001f2c:	0599      	lsls	r1, r3, #22
 8001f2e:	d402      	bmi.n	8001f36 <_fflush_r+0x32>
 8001f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f32:	f7ff fb92 	bl	800165a <__retarget_lock_acquire_recursive>
 8001f36:	4628      	mov	r0, r5
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f7ff ff5d 	bl	8001df8 <__sflush_r>
 8001f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f40:	07da      	lsls	r2, r3, #31
 8001f42:	4605      	mov	r5, r0
 8001f44:	d4e4      	bmi.n	8001f10 <_fflush_r+0xc>
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	059b      	lsls	r3, r3, #22
 8001f4a:	d4e1      	bmi.n	8001f10 <_fflush_r+0xc>
 8001f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f4e:	f7ff fb85 	bl	800165c <__retarget_lock_release_recursive>
 8001f52:	e7dd      	b.n	8001f10 <_fflush_r+0xc>

08001f54 <__swbuf_r>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	460e      	mov	r6, r1
 8001f58:	4614      	mov	r4, r2
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	b118      	cbz	r0, 8001f66 <__swbuf_r+0x12>
 8001f5e:	6a03      	ldr	r3, [r0, #32]
 8001f60:	b90b      	cbnz	r3, 8001f66 <__swbuf_r+0x12>
 8001f62:	f7ff fa75 	bl	8001450 <__sinit>
 8001f66:	69a3      	ldr	r3, [r4, #24]
 8001f68:	60a3      	str	r3, [r4, #8]
 8001f6a:	89a3      	ldrh	r3, [r4, #12]
 8001f6c:	071a      	lsls	r2, r3, #28
 8001f6e:	d525      	bpl.n	8001fbc <__swbuf_r+0x68>
 8001f70:	6923      	ldr	r3, [r4, #16]
 8001f72:	b31b      	cbz	r3, 8001fbc <__swbuf_r+0x68>
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	6922      	ldr	r2, [r4, #16]
 8001f78:	1a98      	subs	r0, r3, r2
 8001f7a:	6963      	ldr	r3, [r4, #20]
 8001f7c:	b2f6      	uxtb	r6, r6
 8001f7e:	4283      	cmp	r3, r0
 8001f80:	4637      	mov	r7, r6
 8001f82:	dc04      	bgt.n	8001f8e <__swbuf_r+0x3a>
 8001f84:	4621      	mov	r1, r4
 8001f86:	4628      	mov	r0, r5
 8001f88:	f7ff ffbc 	bl	8001f04 <_fflush_r>
 8001f8c:	b9e0      	cbnz	r0, 8001fc8 <__swbuf_r+0x74>
 8001f8e:	68a3      	ldr	r3, [r4, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60a3      	str	r3, [r4, #8]
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	6022      	str	r2, [r4, #0]
 8001f9a:	701e      	strb	r6, [r3, #0]
 8001f9c:	6962      	ldr	r2, [r4, #20]
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d004      	beq.n	8001fae <__swbuf_r+0x5a>
 8001fa4:	89a3      	ldrh	r3, [r4, #12]
 8001fa6:	07db      	lsls	r3, r3, #31
 8001fa8:	d506      	bpl.n	8001fb8 <__swbuf_r+0x64>
 8001faa:	2e0a      	cmp	r6, #10
 8001fac:	d104      	bne.n	8001fb8 <__swbuf_r+0x64>
 8001fae:	4621      	mov	r1, r4
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	f7ff ffa7 	bl	8001f04 <_fflush_r>
 8001fb6:	b938      	cbnz	r0, 8001fc8 <__swbuf_r+0x74>
 8001fb8:	4638      	mov	r0, r7
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	f000 f806 	bl	8001fd0 <__swsetup_r>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d0d5      	beq.n	8001f74 <__swbuf_r+0x20>
 8001fc8:	f04f 37ff 	mov.w	r7, #4294967295
 8001fcc:	e7f4      	b.n	8001fb8 <__swbuf_r+0x64>
	...

08001fd0 <__swsetup_r>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	; (800207c <__swsetup_r+0xac>)
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	460c      	mov	r4, r1
 8001fda:	b118      	cbz	r0, 8001fe4 <__swsetup_r+0x14>
 8001fdc:	6a03      	ldr	r3, [r0, #32]
 8001fde:	b90b      	cbnz	r3, 8001fe4 <__swsetup_r+0x14>
 8001fe0:	f7ff fa36 	bl	8001450 <__sinit>
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fea:	0718      	lsls	r0, r3, #28
 8001fec:	d422      	bmi.n	8002034 <__swsetup_r+0x64>
 8001fee:	06d9      	lsls	r1, r3, #27
 8001ff0:	d407      	bmi.n	8002002 <__swsetup_r+0x32>
 8001ff2:	2309      	movs	r3, #9
 8001ff4:	602b      	str	r3, [r5, #0]
 8001ff6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ffa:	81a3      	strh	r3, [r4, #12]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	e034      	b.n	800206c <__swsetup_r+0x9c>
 8002002:	0758      	lsls	r0, r3, #29
 8002004:	d512      	bpl.n	800202c <__swsetup_r+0x5c>
 8002006:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002008:	b141      	cbz	r1, 800201c <__swsetup_r+0x4c>
 800200a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800200e:	4299      	cmp	r1, r3
 8002010:	d002      	beq.n	8002018 <__swsetup_r+0x48>
 8002012:	4628      	mov	r0, r5
 8002014:	f7ff fb24 	bl	8001660 <_free_r>
 8002018:	2300      	movs	r3, #0
 800201a:	6363      	str	r3, [r4, #52]	; 0x34
 800201c:	89a3      	ldrh	r3, [r4, #12]
 800201e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002022:	81a3      	strh	r3, [r4, #12]
 8002024:	2300      	movs	r3, #0
 8002026:	6063      	str	r3, [r4, #4]
 8002028:	6923      	ldr	r3, [r4, #16]
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	89a3      	ldrh	r3, [r4, #12]
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	6923      	ldr	r3, [r4, #16]
 8002036:	b94b      	cbnz	r3, 800204c <__swsetup_r+0x7c>
 8002038:	89a3      	ldrh	r3, [r4, #12]
 800203a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800203e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002042:	d003      	beq.n	800204c <__swsetup_r+0x7c>
 8002044:	4621      	mov	r1, r4
 8002046:	4628      	mov	r0, r5
 8002048:	f000 f850 	bl	80020ec <__smakebuf_r>
 800204c:	89a0      	ldrh	r0, [r4, #12]
 800204e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002052:	f010 0301 	ands.w	r3, r0, #1
 8002056:	d00a      	beq.n	800206e <__swsetup_r+0x9e>
 8002058:	2300      	movs	r3, #0
 800205a:	60a3      	str	r3, [r4, #8]
 800205c:	6963      	ldr	r3, [r4, #20]
 800205e:	425b      	negs	r3, r3
 8002060:	61a3      	str	r3, [r4, #24]
 8002062:	6923      	ldr	r3, [r4, #16]
 8002064:	b943      	cbnz	r3, 8002078 <__swsetup_r+0xa8>
 8002066:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800206a:	d1c4      	bne.n	8001ff6 <__swsetup_r+0x26>
 800206c:	bd38      	pop	{r3, r4, r5, pc}
 800206e:	0781      	lsls	r1, r0, #30
 8002070:	bf58      	it	pl
 8002072:	6963      	ldrpl	r3, [r4, #20]
 8002074:	60a3      	str	r3, [r4, #8]
 8002076:	e7f4      	b.n	8002062 <__swsetup_r+0x92>
 8002078:	2000      	movs	r0, #0
 800207a:	e7f7      	b.n	800206c <__swsetup_r+0x9c>
 800207c:	20000058 	.word	0x20000058

08002080 <_sbrk_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4d06      	ldr	r5, [pc, #24]	; (800209c <_sbrk_r+0x1c>)
 8002084:	2300      	movs	r3, #0
 8002086:	4604      	mov	r4, r0
 8002088:	4608      	mov	r0, r1
 800208a:	602b      	str	r3, [r5, #0]
 800208c:	f7fe fb10 	bl	80006b0 <_sbrk>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	d102      	bne.n	800209a <_sbrk_r+0x1a>
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	b103      	cbz	r3, 800209a <_sbrk_r+0x1a>
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	bd38      	pop	{r3, r4, r5, pc}
 800209c:	200003d4 	.word	0x200003d4

080020a0 <__swhatbuf_r>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	460c      	mov	r4, r1
 80020a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a8:	2900      	cmp	r1, #0
 80020aa:	b096      	sub	sp, #88	; 0x58
 80020ac:	4615      	mov	r5, r2
 80020ae:	461e      	mov	r6, r3
 80020b0:	da0d      	bge.n	80020ce <__swhatbuf_r+0x2e>
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	bf0c      	ite	eq
 80020be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80020c2:	2340      	movne	r3, #64	; 0x40
 80020c4:	2000      	movs	r0, #0
 80020c6:	6031      	str	r1, [r6, #0]
 80020c8:	602b      	str	r3, [r5, #0]
 80020ca:	b016      	add	sp, #88	; 0x58
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	466a      	mov	r2, sp
 80020d0:	f000 f848 	bl	8002164 <_fstat_r>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	dbec      	blt.n	80020b2 <__swhatbuf_r+0x12>
 80020d8:	9901      	ldr	r1, [sp, #4]
 80020da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80020de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80020e2:	4259      	negs	r1, r3
 80020e4:	4159      	adcs	r1, r3
 80020e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ea:	e7eb      	b.n	80020c4 <__swhatbuf_r+0x24>

080020ec <__smakebuf_r>:
 80020ec:	898b      	ldrh	r3, [r1, #12]
 80020ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020f0:	079d      	lsls	r5, r3, #30
 80020f2:	4606      	mov	r6, r0
 80020f4:	460c      	mov	r4, r1
 80020f6:	d507      	bpl.n	8002108 <__smakebuf_r+0x1c>
 80020f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	6123      	str	r3, [r4, #16]
 8002100:	2301      	movs	r3, #1
 8002102:	6163      	str	r3, [r4, #20]
 8002104:	b002      	add	sp, #8
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	ab01      	add	r3, sp, #4
 800210a:	466a      	mov	r2, sp
 800210c:	f7ff ffc8 	bl	80020a0 <__swhatbuf_r>
 8002110:	9900      	ldr	r1, [sp, #0]
 8002112:	4605      	mov	r5, r0
 8002114:	4630      	mov	r0, r6
 8002116:	f7ff fb0f 	bl	8001738 <_malloc_r>
 800211a:	b948      	cbnz	r0, 8002130 <__smakebuf_r+0x44>
 800211c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002120:	059a      	lsls	r2, r3, #22
 8002122:	d4ef      	bmi.n	8002104 <__smakebuf_r+0x18>
 8002124:	f023 0303 	bic.w	r3, r3, #3
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	81a3      	strh	r3, [r4, #12]
 800212e:	e7e3      	b.n	80020f8 <__smakebuf_r+0xc>
 8002130:	89a3      	ldrh	r3, [r4, #12]
 8002132:	6020      	str	r0, [r4, #0]
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	81a3      	strh	r3, [r4, #12]
 800213a:	9b00      	ldr	r3, [sp, #0]
 800213c:	6163      	str	r3, [r4, #20]
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	6120      	str	r0, [r4, #16]
 8002142:	b15b      	cbz	r3, 800215c <__smakebuf_r+0x70>
 8002144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002148:	4630      	mov	r0, r6
 800214a:	f000 f81d 	bl	8002188 <_isatty_r>
 800214e:	b128      	cbz	r0, 800215c <__smakebuf_r+0x70>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	89a3      	ldrh	r3, [r4, #12]
 800215e:	431d      	orrs	r5, r3
 8002160:	81a5      	strh	r5, [r4, #12]
 8002162:	e7cf      	b.n	8002104 <__smakebuf_r+0x18>

08002164 <_fstat_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	4d07      	ldr	r5, [pc, #28]	; (8002184 <_fstat_r+0x20>)
 8002168:	2300      	movs	r3, #0
 800216a:	4604      	mov	r4, r0
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	602b      	str	r3, [r5, #0]
 8002172:	f7fe fa74 	bl	800065e <_fstat>
 8002176:	1c43      	adds	r3, r0, #1
 8002178:	d102      	bne.n	8002180 <_fstat_r+0x1c>
 800217a:	682b      	ldr	r3, [r5, #0]
 800217c:	b103      	cbz	r3, 8002180 <_fstat_r+0x1c>
 800217e:	6023      	str	r3, [r4, #0]
 8002180:	bd38      	pop	{r3, r4, r5, pc}
 8002182:	bf00      	nop
 8002184:	200003d4 	.word	0x200003d4

08002188 <_isatty_r>:
 8002188:	b538      	push	{r3, r4, r5, lr}
 800218a:	4d06      	ldr	r5, [pc, #24]	; (80021a4 <_isatty_r+0x1c>)
 800218c:	2300      	movs	r3, #0
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	602b      	str	r3, [r5, #0]
 8002194:	f7fe fa73 	bl	800067e <_isatty>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d102      	bne.n	80021a2 <_isatty_r+0x1a>
 800219c:	682b      	ldr	r3, [r5, #0]
 800219e:	b103      	cbz	r3, 80021a2 <_isatty_r+0x1a>
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
 80021a4:	200003d4 	.word	0x200003d4

080021a8 <_init>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr

080021b4 <_fini>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	bf00      	nop
 80021b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ba:	bc08      	pop	{r3}
 80021bc:	469e      	mov	lr, r3
 80021be:	4770      	bx	lr
